/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "Documentation for pp_lib";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./al_legend_pp.html", "al_legend_pp.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "al_legend_pp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./al_legend_pp.html#al_legend_pp", "al_legend_pp", 'routine in <a href="./al_legend_pp.html">al_legend_pp.pro</a>', "al_legend_pp.pro", "", "al_legend_pp", "       AL_LEGEND, from idlastro, with an extra keyword (background_color),        to specifiy what color will fill the legend box when the keywrod        clear is set.        Create an annotation legend for a plot.         Because IDL 8.0 contains a LEGEND() function written in IDL, the        original LEGEND procedure in the Astronomy Library is renamed to        AL_LEGEND.     (The original legend.pro remains.)         This procedure makes a legend for a plot.  The legend can contain        a mixture of symbols, linestyles, Hershey characters (vectorfont),        and filled polygons (usersym).  A test procedure, legendtest.pro,        shows legend's capabilities.  Placement of the legend is controlled        with keywords like /right, /top, and /center or by using a position        keyword for exact placement (position=[x,y]) or via mouse (/position).         none         If keyword help is set, call doc_library to print header.        See notes in the code.  Much of the code deals with placement of the        legend.  The main problem with placement is not being        able to sense the length of a string before it is output.  Some crude        approximations are used for centering.         Here are some things that aren't implemented.        - An orientation keyword would allow lines at angles in the legend.        - An array of usersyms would be nice---simple change.        - An order option to interchange symbols and text might be nice.        - Somebody might like double boxes, e.g., with box = 2.        - Another feature might be a continuous bar with ticks and text.        - There are no guards to avoid writing outside the plot area.        - There is no provision for multi-line text, e.g., '1st line!c2nd line'          Sensing !c would be easy, but !c isn't implemented for PostScript.          A better way might be to simply output the 2nd line as another item          but without any accompanying symbol or linestyle.  A flag to omit          the symbol and linestyle is linestyle[i] = -1.        - There is no ability to make a title line containing any of titles          for the legend, for the symbols, or for the text.  ", "BOTTOM_LEGENDBOXCENTER_LEGENDCHARTHICKCHARSIZECLEARCOLORSCORNERSDATADELIMITERDEVICEFILLHELPHORIZONTALLEFT_LEGENDLINESTYLEMARGINNORMALNUMBERPOSITIONPSPACINGPSYMRIGHT_LEGENDSPACINGSYMSIZETEXTCOLORSTHICKTOP_LEGENDUSERSYMVECTORFONTVERTICALOUTLINE_COLORFONTbackground_coloritems", "          -1", "       write, 24-25 Aug 92, F K Knight (knight@ll.mit.edu)        allow omission of items or omission of both psym and linestyle, add          corners keyword to facilitate multi-column legends, improve place-          ment of symbols and text, add guards for unequal size, 26 Aug 92, FKK        add linestyle(i)=-1 to suppress a single symbol/line, 27 Aug 92, FKK        add keyword vectorfont to allow characters in the sym/line column,          28 Aug 92, FKK        add /top, /bottom, /left, /right keywords for automatic placement at          the four corners of the plot window.  The /right keyword forces          right-to-left printing of menu. 18 Jun 93, FKK        change default position to data coords and add normal, data, and          device keywords, 17 Jan 94, FKK        add /center keyword for positioning, but it is not precise because          text string lengths cannot be known in advance, 17 Jan 94, FKK        add interactive positioning with /position keyword, 17 Jan 94, FKK        allow a legend with just text, no plotting symbols.  This helps in          simply describing a plot or writing assumptions done, 4 Feb 94, FKK        added thick, symsize, and clear keyword Feb 96, W. Landsman HSTX                David Seed, HR Wallingford, d.seed@hrwallingford.co.uk        allow scalar specification of keywords, Mar 96, W. Landsman HSTX        added charthick keyword, June 96, W. Landsman HSTX        Made keyword names  left,right,top,bottom,center longer,                                  Aug 16, 2000, Kim Tolbert        Added ability to have regular text lines in addition to plot legend        lines in legend.  If linestyle is -99 that item is left-justified.        Previously, only option for no sym/line was linestyle=-1, but then text        was lined up after sym/line column.    10 Oct 2000, Kim Tolbert        Make default value of thick = !P.thick  W. Landsman  Jan. 2001        Don't overwrite existing USERSYM definition  W. Landsman Mar. 2002 	      Added outline_color BT 24 MAY 2004        Pass font keyword to xyouts commands.  M. Fitzgerald, Sep. 2005        Default spacing, pspacing should be relative to charsize. M. Perrin, July 2007        Don't modify position keyword  A. Kimball/ W. Landsman Jul 2007        Small update to Jul 2007 for /NORMAL coords.  W. Landsman Aug 2007        Use SYMCAT() plotting symbols for 11<=PSYM<=46   W. Landsman  Nov 2009        Make a sharper box edge T. Robishaw/W.Landsman July 2010        Added background_color keyword. Paulo Penteado (pp.penteado@gmail.com), Sep/2010        The call:                al_legend,['Plus sign','Asterisk','Period'],psym=[1,2,3]          produces:                -----------------                |               |                |  + Plus sign  |                |  * Asterisk   |                |  . Period     |                |               |                -----------------          Each symbol is drawn with a plots command, so they look OK.          Other examples are given in optional output keywords.         lines = indgen(6)                       ; for line styles        items = 'linestyle '+strtrim(lines,2)   ; annotations        legend,items,linestyle=lines            ; vertical legend---upper left        items = ['Plus sign','Asterisk','Period']        sym = [1,2,3]        al_legend,items,psym=sym                   ; ditto except using symbols        al_legend,items,psym=sym,/horizontal       ; horizontal format        al_legend,items,psym=sym,box=0             ; sans border        al_legend,items,psym=sym,delimiter='='     ; embed '=' betw psym & text        al_legend,items,psym=sym,margin=2          ; 2-character margin        al_legend,items,psym=sym,position=[x,y]    ; upper left in data coords        al_legend,items,psym=sym,pos=[x,y],/norm   ; upper left in normal coords        al_legend,items,psym=sym,pos=[x,y],/device ; upper left in device coords        al_legend,items,psym=sym,/position         ; interactive position        al_legend,items,psym=sym,/right            ; at upper right        al_legend,items,psym=sym,/bottom           ; at lower left        al_legenditems,psym=sym,/center           ; approximately near center        al_legend,items,psym=sym,number=2          ; plot two symbols, not one        al_legend,items,/fill,psym=[8,8,8],colors=[10,20,30]; 3 filled squares        legend to current plot device  ");
  
  

libdata[libdataItem++] = new Array("./histogram_pp.html", "histogram_pp.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "histogram_pp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./histogram_pp.html#histogram_pp", "histogram_pp", 'routine in <a href="./histogram_pp.html">histogram_pp.pro</a>', "histogram_pp.pro", "Paulo Penteado (pp.penteado@gmail.com), July/2010  ", "histogram_pp", "    A simple wrapper to histogram(), to create a new output keyword,     reverse_list, which provides equivalent data as reverse_indices, but parsed     into a list (with !null for empty bins). See the help on histogram() for     anything besides the reverse_list keyword.   ", "reverse_list      A list of reverse indices: has the same number of elements as the output       of histogram(), where each element is an array containing the indices of       the elements of the input array that fall into the corresponding bin. If       a bin is empty, the corresponding list element is !null.  reverse_hash      A hash of reverse indices: has the same number of elements as the output       of histogram(), where each element contains an array containing the indices of       the elements of the input array that fall into the corresponding bin. If       a bin is empty, the corresponding hash element is !null. The key for each element       is the bin location (as returned by the locations keyword).  reverse_indices      The reverse indices, as an array, unaltered from the output of       histogram(). See the help on histogram() for more details on       reverse_indices.  locations_ref_extra      Any other keywords are passed on (strictly) to histogram(), and returned       unaltered. See the help on histogram() for these keywords.   array      Passed on, unaltered, to histogram(), its only positional parameter. See       the help on histogram() for more details.   ", "          -1", "   Make up a few random values and see the list returned by histogram_pp(): <span class= code-output > vals=randomu(0L,15)*13d0</span> <span class= code-output > h=histogram_pp(vals,reverse_indices=ri,reverse_list=rl,locations=loc,reverse_hash=rh)</span> <span class= code-output > print,h</span> <span class= code-output > ;1           3           0           4           2           1           0           4</span> <span class= code-output > print,ri[ri[0]:ri[1]-1]</span> <span class= code-output > ;13</span> <span class= code-output > foreach el,rl,i do print,i,' : ',el</span> <span class= code-output > ;0 :           13</span> <span class= code-output > ;1 :            8          11          12</span> <span class= code-output > ;2 : !NULL</span> <span class= code-output > ;3 :            0           1           4           6</span> <span class= code-output > ;4 :            9          10</span> <span class= code-output > ;5 :            2</span> <span class= code-output > ;6 : !NULL</span> <span class= code-output > ;7 :            3           5           7          14</span> <span class= code-output > foreach el,loc do print,el,' : ',rh[el]</span> <span class= code-output > ;3.8679500 :           13</span> <span class= code-output > ;4.8679500 :            8          11          12</span> <span class= code-output > ;5.8679500 : !NULL</span> <span class= code-output > ;6.8679500 :            0           1           4           6</span> <span class= code-output > ;7.8679500 :            9          10</span> <span class= code-output > ;8.8679500 :            2</span> <span class= code-output > ;9.8679500 : !NULL</span> <span class= code-output > ;10.867950 :            3           5           7          14</span>  IDL 8.0.   ");
  
  

libdata[libdataItem++] = new Array("./multiplot_pp.html", "multiplot_pp.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "multiplot_pp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./multiplot_pp.html#multiplot_pp", "multiplot_pp", 'routine in <a href="./multiplot_pp.html">multiplot_pp.pro</a>', "multiplot_pp.pro", "", "multiplot_pp", "	Create multiple plots with shared axes.  EXPLANATION: 	This procedure makes a matrix of plots with *SHARED AXES*, either using 	parameters passed to multiplot or !p.multi in a non-standard way. 	It is good for data with one or two shared axes and retains all the 	versatility of the plot commands (e.g. all keywords and log scaling). 	The plots are connected with the shared axes, which saves space by 	omitting redundant ticklabels and titles.  Multiplot does this by 	setting !p.position, !x.tickname and !y.tickname automatically. 	A call (multiplot,/reset) restores original values.  	Note: This method may be superseded by future improvements in !p.multi 	by RSI.  For now, it's a good way to gang plots together. 	Multiplot sets a number of system variables: !p.position, !p.multi, 	!x.tickname, !y.tickname, !P.noerase---but all can be reset with 	the call: multiplot,/reset 	1. If you use !p.multi as the method of telling how many plots 	are present, you have to set !p.multi at the beginning each time you 	use multiplot or call multiplot with the /reset keyword. 	2. There's no way to make an xtitle or ytitle span more than one plot, 	except by adding spaces to shift it or to add it manually with xyouts. 	3. There is no way to make plots of different sizes; each plot 	covers the same area on the screen or paper. 	This routine makes a matrix of plots with common axes, as opposed to 	the method of !p.multi where axes are separated to allow labels. 	Here the plots are joined and labels are suppressed, except at the 	left edge and the bottom.  You tell multiplot how many plots to make 	using either !p.multi (which is then reset) or the parameter pmulti. 	However, multiplot keeps track of the position by itself because 	!p.multi interacts poorly with !p.position. ", "helpinitializeresetdefaultrowmajorverbosepmulti", "          -1", "	write, 21-23 Mar 94, Fred Knight (knight@ll.mit.edu) 	alter plot command that sets !x.window, etc. per suggestion of 	  Mark Hadfield (hadfield@storm.greta.cri.nz), 7 Apr 94, FKK 	add a /default keyword restore IDL's default values of system vars, 	  7 Apr 94, FKK 	modify two more sys vars !x(y).tickformat to suppress user-formatted 	  ticknames, per suggestion of Mark Hadfield (qv), 8 Apr 94, FKK 	Converted to IDL V5.0   W. Landsman   September 1997 	Changed the margin calculation to incorporate !x.omargin 	 and !y.omargin. P. Penteado (pp.penteado@gmail.com) Apr 2010  Changed the lines that disable ticks to set x|y.tickname to all ' ',   instead of replicating ' ' a set 30 times. P. Penteado (pp.penteado@gmail.com) Apr 2011 	!p.position = 4-element vector to place a plot 	!x.tickname = either '' or else 30 ' ' to suppress ticknames 	!y.tickname = either '' or else 30 ' ' to suppress ticknames 	!p.noerase = 1 ");
  
  

libdata[libdataItem++] = new Array("./pp_appendcolumn.html", "pp_appendcolumn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_appendcolumn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_appendcolumn.html#pp_appendcolumn", "pp_appendcolumn", 'routine in <a href="./pp_appendcolumn.html">pp_appendcolumn.pro</a>', "pp_appendcolumn.pro", "", "pp_appendcolumn", "", "strincolnameicolvalues", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_azdif.html", "pp_azdif.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_azdif.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_azdif.html#pp_azdif", "pp_azdif", 'routine in <a href="./pp_azdif.html">pp_azdif.pro</a>', "pp_azdif.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2009  ", "pp_azdif", "    Given the angle between two directions (dphase) with angle from vertical     given by dinc, dema, returns the azimuth difference between them. All inputs     and the output are in degrees. This function is vectorized, so the 3 input arguments     can be of any dimension (must be the same for all 3), and that will be the dimension of the     result.     This function is complementary to pp_phase_angle.   ", "dphase      The angle between the two directions (phase angle), in degrees.  dinc      The angle between one of the directions and the vertical (incidence angle), in degrees.  dema      The angle between the other direction and the vertical (emission angle), in degrees.   ", "          -1", "    Taking incidence and emission in the same plane: <span class= code-output > print,pp_azdif(30d0,40d0,70d0)</span> <span class= code-output > ;0.0000000</span> <span class= code-output > print,pp_azdif(110d0,40d0,70d0)</span> <span class= code-output > ;180.00001</span>     Taking incidence and emission at the horizon: <span class= code-output > print,pp_azdif(110d0,90d0,90d0)</span> <span class= code-output > ;110.00000</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html", "pp_buffered_vector__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2009  ", "", " ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::init", "pp_buffered_vector::init", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::init", "    Creates a pp_buffered_vector object, with the contents of the given array, or empty     if it is not provided.     The buffered vector can contain elements of any type. The type is determined by the type of     the first element put into it (if not at initialization, at the first append operation).   ", "buffersize      Size of the step to use when incrementing the number of elements contained by the object.   initvec      An array whose elements are to be placed in the object on creation.   ", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::append", "pp_buffered_vector::append", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::append", "    Adds the given data (scalar or array) to the end of the buffered vector, expanding     its allocated size if necessary.   ", "data      The scalar or array to be put at the end of the buffered vector.   ", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::getdata", "pp_buffered_vector::getdata", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::getdata", "    Retrieves one or more data elements currently stored in the buffered vector.   ", "all      If set, all the elements stored in the buffered vector are returned.  count      Returns the number of elements retrieved.   nget      The number of elements to retrieve. If positive, the nget first elements are returned. If       negative, the last -nget elements are returned. If abs(nget) is larger than the number of       elements in the buffered vector, all the elements are returned. The value returned by count       must be checked to find out how many elements were actually returned.   ", "          -1", "    See the example in pp_bufferedvector__define.        If the buffered vector is empty, returns 0, with a count of 0. Otherwise, returns an array with     the selected elements from the buffered vector, and the number of elements in count.   ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::getcount", "pp_buffered_vector::getcount", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::getcount", "    Returns the number of elements currently stored in the buffered vector.   ", "", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::getsize", "pp_buffered_vector::getsize", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::getsize", "    Returns the currently allocated length for the buffered vector.   ", "", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector::getbuffersize", "pp_buffered_vector::getbuffersize", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Oct/2009  ", "pp_buffered_vector::getbuffersize", "    Returns the step by which the buffered vector is incremented when necessary.   ", "", "          -1", "    See the example in pp_bufferedvector__define.    ");
  
  libdata[libdataItem++] = new Array("./pp_buffered_vector__define.html#pp_buffered_vector__define", "pp_buffered_vector__define", 'routine in <a href="./pp_buffered_vector__define.html">pp_buffered_vector__define.pro</a>', "pp_buffered_vector__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2009  ", "pp_buffered_vector__define", "   Object to keep an adjustable length vector, using a buffer to decrease the frequency of resizing     It is a simple (without DLM) and relatively efficient implementation of a container similar to a list,    intended for light use. For heavy use, it would take a DLM to implement a proper list.   ", "", "          -1", "   Make a new empty buffered vector: <span class= code-output > a=obj_new('pp_buffered_vector')</span> <span class= code-output > print,a-&gt;getcount()</span> <span class= code-output > ;0</span> <span class= code-output > a-&gt;append,indgen(10)</span> <span class= code-output > print,a-&gt;getcount()</span> <span class= code-output > ;10</span> <span class= code-output > print,a-&gt;getdata(5)</span> <span class= code-output > ;0       1       2       3       4</span> <span class= code-output > rint,a-&gt;getdata(-5)</span> <span class= code-output > ;5       6       7       8       9</span> <span class= code-output > print,a-&gt;getdata(/all)</span> <span class= code-output > ;0       1       2       3       4       5       6       7       8       9</span> <span class= code-output > print,a-&gt;getsize()</span> <span class= code-output > ;100</span> <span class= code-output > print,a-&gt;getbuffersize()</span> <span class= code-output > ;100</span> <span class= code-output > obj_destroy,a</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_cmap.html", "pp_cmap.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_cmap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_cmap.html#pp_cmap", "pp_cmap", 'routine in <a href="./pp_cmap.html">pp_cmap.pro</a>', "pp_cmap.pro", "Paulo Penteado (pp.penteado@gmail.com), Dec/2009  ", "pp_cmap", "    Returns a colormap with nc saturated colors equally spaced in hue, plus black, white and one grey.   ", "lct      If set, the colormap created is loaded with tvlct.  grey      The intensity of the grey color to make.  hls      If set, the colors returned are in HLS space, instead of RGB space.   nc      Number of equally spaced saturated colors to make.   ", "          -1", "    Make a plot with pure black, red, green and blue lines: <span class= code-output > cmap=pp_cmap(3)</span> <span class= code-output > for i=0,3 do iplot,randomu(seed,10),color=cmap[*,i],over=(i ne 0),thick=2.</span>     Make a plot with pure black, red, yellow, green, cyan, blue and magenta lines: <span class= code-output > cmap=pp_cmap(6)</span> <span class= code-output > for i=0,6 do iplot,randomu(seed,10),color=cmap[*,i],over=(i ne 0),thick=2.</span>     Make an eps in direct graphics pre-IDL 7.1: <span class= code-output > cmap=pp_cmap(3)</span> <span class= code-output > olddev=!d.name ;keep a copy of the current device name</span> <span class= code-output > set_plot,'ps'</span> <span class= code-output > device,filename='pp_cmap.eps',/encapsulated,/color,decomposed=0</span> <span class= code-output > tvlct,old1,old2,old3,/get ;keep a copy of the current colormap</span> <span class= code-output > tvlct,cmap[0,*],cmap[1,*],cmap[2,*] ;change the colormap</span> <span class= code-output > plot,[0d0,9d0],[0d0,1d0],/nodata</span> <span class= code-output > for i=0,3 do oplot,randomu(seed,10),color=i,thick=2.</span> <span class= code-output > tvlct,old1,old2,old3 ;restore the old colormap</span> <span class= code-output > device,/close</span> <span class= code-output > set_plot,olddev ;restore the old device name</span>     Make an eps in direct graphics with truecolor (only available from IDL 7.1): <span class= code-output > cmap=pp_cmap(3)</span> <span class= code-output > olddev=!d.name ;keep a copy of the current device name</span> <span class= code-output > set_plot,'ps'</span> <span class= code-output > device,filename='pp_cmap.eps',/encapsulated,/color,decomposed=1</span> <span class= code-output > plot,[0d0,9d0],[0d0,1d0],/nodata</span> <span class= code-output > for i=0,3 do oplot,randomu(seed,10),color=cmap[0,i]+cmap[1,i]*2L^8+cmap[2,i]*2L^16,thick=2.</span> <span class= code-output > device,/close</span> <span class= code-output > set_plot,olddev ;restore the old device name</span>       A (3,(nc+3)) array, where each row contains the HLS or RGB values for each color. The first color is black,     the last is white, the one before last is grey, and the equally spaced saturated colors lie in between, in hue     order.   ");
  
  

libdata[libdataItem++] = new Array("./pp_cmap_show.html", "pp_cmap_show.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_cmap_show.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_cmap_show.html#pp_cmap_show", "pp_cmap_show", 'routine in <a href="./pp_cmap_show.html">pp_cmap_show.pro</a>', "pp_cmap_show.pro", "Paulo Penteado (pp.penteado@gmail.com), Dec/2009  ", "pp_cmap_show", "    Produces an iplot showing the color of each index in the given colormap array. Each bar is plotted with the x     location corresponding to its index. See example below.   ", "cm      The colormap to display, in a 3xn array of RGB values, with each row being the 3 values for each color index.       It is the same format as returned by pp_cmap (see example below).  locs      If given an array of n values, those are used for the locations of each color plotted, instead of their indexes.   ", "          -1", "    To identify the colors made by pp_cmap: <span class= code-output > cmap=pp_cmap(6)</span> <span class= code-output > print,cmap</span> <span class= code-output > ;  0   0   0</span> <span class= code-output > ;255   0   0</span> <span class= code-output > ;255 255   0</span> <span class= code-output > ;0 255   0</span> <span class= code-output > ;0 255 255</span> <span class= code-output > ;0   0 255</span> <span class= code-output > ;255   0 255</span> <span class= code-output > ;127 127 127</span> <span class= code-output > ;255 255 255</span> <span class= code-output > pp_cmap_show,cm</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_cmfr__define.html", "pp_cmfr__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_cmfr__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Aug/2009  ", "", "    Object to read and interpret OBSFLUX-type files created by cmfgen:      Uses pp_cmfread to do the low level reading and parsing,     and returns a structure with the names and values read (see that function for details).     pp_cmfread is more general, works with any file with a     format like OBSFLUX or obs_fin (see the function for details).      The object pp_cmfr uses pp_cmfread, then tries to interpret the variable names     to match with them with the physical quantities expected to be in the file.      The interesting methods are getall, and getvariable (see below).   ", "", "          -1", "pp_cmfread   ");
  
  
  libdata[libdataItem++] = new Array("./pp_cmfr__define.html#pp_cmfr::getall", "pp_cmfr::getall", 'routine in <a href="./pp_cmfr__define.html">pp_cmfr__define.pro</a>', "pp_cmfr__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Aug/2009  ", "pp_cmfr::getall", "    Returns a structure containing all the 6 scalars and 9 vectors read from the object (NaN for those not found).   ", "desc      A string array with the pairs of tag names and their descriptors in the result.   ", "          -1", "    To read everything from the file 'OBSFLUX': <span class= code-output > oobs=obj_new('pp_cmfr','OBSFLUX') ;reads 'OBSFLUX', though the file name is the same as the default</span> <span class= code-output > all=oobs-&gt;getall(desc=desc)</span> <span class= code-output > print,desc,format='(A10,   ,A)'</span> <span class= code-output > ;    S_LINE Total Line luminosity</span> <span class= code-output > ; S_DIELIMP Total Dielectronic and Implicit Recombination Luminosity</span> <span class= code-output > ;    S_MECH Total Mechanical Luminosity</span> <span class= code-output > ;   S_SHOCK Total Shock Luminosity</span> <span class= code-output > ;   S_XRAYH X-ray Luminosity (&gt; 1 keV)</span> <span class= code-output > ;   S_XRAYL X-ray Luminosity (&gt; 0.1 keV)</span> <span class= code-output > ;      FREQ Continuum Frequencies</span> <span class= code-output > ;    INTENS Observed intensity (Janskys)</span> <span class= code-output > ;       LUM Luminosity</span> <span class= code-output > ;   DIELIMP Dielectronic and Implicit Recombination Line Emission</span> <span class= code-output > ;      LINE Line Emission</span> <span class= code-output > ;      MECH Mechanical Luminosity</span> <span class= code-output > ;       RAD Total Radiative Luminosity</span> <span class= code-output > ;     SHOCK Total Schock Luminosity</span> <span class= code-output > ;   RADMECH Total (Rad. + Mech.) Luminosity</span> <span class= code-output > iplot,all.freq,all.intens ;plot the intensities</span>  ");
  
  libdata[libdataItem++] = new Array("./pp_cmfr__define.html#pp_cmfr::getvariable", "pp_cmfr::getvariable", 'routine in <a href="./pp_cmfr__define.html">pp_cmfr__define.pro</a>', "pp_cmfr__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Aug/2009  ", "pp_cmfr::getvariable", "    Returns the variables selected from the corresponding keywords (see description below)   ", "desc      An array string with the pairs of tag names and their descriptors in the result.  s_line      Total Line luminosity.  s_dielimp      Total Dielectronic and Implicit Recombination Luminosity.  s_mech      Total Mechanical Luminosity.  s_shock      Total Shock Luminosity.  s_xrayh      X-ray Luminosity (&gt; 1 keV).  s_xrayl      X-ray Luminosity (&gt; 0.1 keV).  freq      Continuum Frequencies.  intens      Observed intensity (Janskys).  lum      Luminosity.  dielimp      Dielectronic and Implicit Recombination Line Emission.  line      Line Emission.  mech      Mechanical Luminosity.  rad      Total Radiative Luminosity.  shock      Total Schock Luminosity.  radmech      Total (Rad. + Mech.) Luminosity.   ", "          -1", "    To obtain the frequencies and intensities from a file 'OBSFLUX' and plot them: <span class= code-output > oobs=obj_new('pp_cmfr') ;the default file name is 'OBSFLUX', so it is not necessary to provide it</span> <span class= code-output > oobs-&gt;getvariable,intens=intens,freq=freq</span> <span class= code-output > iplot,freq,intens</span>  ");
  
  libdata[libdataItem++] = new Array("./pp_cmfr__define.html#pp_cmfr::init", "pp_cmfr::init", 'routine in <a href="./pp_cmfr__define.html">pp_cmfr__define.pro</a>', "pp_cmfr__define.pro", "", "pp_cmfr::init", "", "file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_cmfr__define.html#pp_cmfr::cleanup", "pp_cmfr::cleanup", 'routine in <a href="./pp_cmfr__define.html">pp_cmfr__define.pro</a>', "pp_cmfr__define.pro", "", "pp_cmfr::cleanup", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_cmfr__define.html#pp_cmfr__define", "pp_cmfr__define", 'routine in <a href="./pp_cmfr__define.html">pp_cmfr__define.pro</a>', "pp_cmfr__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Aug/2009  ", "pp_cmfr__define", "    Object to read and interpret OBSFLUX-type files created by cmfgen:      Uses pp_cmfread to do the low level reading and parsing,     and returns a structure with the names and values read (see that function for details).     pp_cmfread is more general, works with any file with a     format like OBSFLUX or obs_fin (see the function for details).      The object pp_cmfr uses pp_cmfread, then tries to interpret the variable names     to match with them with the physical quantities expected to be in the file.      The interesting methods are getall, and getvariable (see below).   ", "", "          -1", "pp_cmfread   ");
  
  

libdata[libdataItem++] = new Array("./pp_cmfread.html", "pp_cmfread.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_cmfread.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_cmfread.html#pp_cmfread", "pp_cmfread", 'routine in <a href="./pp_cmfread.html">pp_cmfread.pro</a>', "pp_cmfread.pro", "Paulo Penteado (pp.penteado@gmail.com), Aug/2009  ", "pp_cmfread", "    Reads an OBSFLUX-type file generated by cmfgen and parses its content to extract each variable in it.      Also works for obs_fin, even though it has less variables in it.      More precisely, the format assumed is a text file where:       Scalars occupy one line, with their name followed by : followed by their value.       Arrays occupy one line for the name, followed by however many lines with however many numbers in each      with the numbers in each line separated by blanks (space or tab).       An array ends when a name (of the next variable) or the end of the file is reached.       Blank lines anywhere are ignored.   ", "file      String with the name of the file to read.   ", "          -1", "    To read everything from the file 'OBSFLUX': <span class= code-output > obs=pp_cmfread('OBSFLUX')</span> <span class= code-output > print,obs.nscal</span> <span class= code-output > ;           6</span> <span class= code-output > for i=0,obs.nscal-1 do print,obs.scal[i]</span> <span class= code-output > ;{ Total Line luminosity       0.0000000}</span> <span class= code-output > ;{ Total Dielectronic and Implicit Recombination Luminosity       0.0000000}</span> <span class= code-output > ;{ Total Mechanical Luminosity       1531.0000}</span> <span class= code-output > ;{ Total Shock Luminosity       0.0000000}</span> <span class= code-output > ;{ X-ray Luminosity (&gt; 0.1 keV)        0.0000000}</span> <span class= code-output > ;{ X-ray Luminosity (&gt; 1 keV)       0.0000000}</span>      The results are packed in a structure, see the end of the function for definition of members.   ");
  
  

libdata[libdataItem++] = new Array("./pp_colorbar_range.html", "pp_colorbar_range.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_colorbar_range.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_colorbar_range.html#pp_colorbar_range", "pp_colorbar_range", 'routine in <a href="./pp_colorbar_range.html">pp_colorbar_range.pro</a>', "pp_colorbar_range.pro", "Paulo Penteado (pp.penteado@gmail.com), Aug/2009  ", "pp_colorbar_range", "    Changes the range of values spanned by the labels in an existing colorbar.   ", "format      Format specification to use when making the new tick labels.  vnumber      View number (panel number) in the itool where the text should be placed.  id      Itool id to use. If not specified, the current is used and its id is returned.  _ref_extra      Any other properties of the colorbar to set (IDLitVisColorbar properties).   range      Two-element array with the range to be spanned by the colorbar.  np      Number of tick marks to use.   ", "          -1", "   Make a sample plot: <span class= code-output > iplot,findgen(10),vert_colors=bindgen(10)*255/(9.),/insert_colorbar</span> <span class= code-output > pp_colorbar_range,[0.,5.],font_size=12.</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_colortripletolong.html", "pp_colortripletolong.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_colortripletolong.pro", "Paulo Penteado (http://www.ppenteado.net), Aug/2015  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_colortripletolong.html#pp_colortripletolong", "pp_colortripletolong", 'routine in <a href="./pp_colortripletolong.html">pp_colortripletolong.pro</a>', "pp_colortripletolong.pro", "Paulo Penteado (http://www.ppenteado.net), Aug/2015  ", "pp_colortripletolong", "    Converts colors from RGB color triples to long integers. Input can be a single triple     or multiple triples, as an array of any dimension. The inverse of this function is     pp_longtocolortriple.   ", "icolors      An array of color triples. The first dimension of the array must have size 3,       and be the color dimension.   ", "          -1", "   Convert black and white, from RGB vectors to long integers: <span class= code-output > print,pp_colortripletolong([[0,0,0],[255,255,255]])</span> <span class= code-output > ;           0    16777215</span>        An array with colors encoded as long integers, one long per per input triple. Output     dimension is one less than input.   ");
  
  

libdata[libdataItem++] = new Array("./pp_command_line_args_parse.html", "pp_command_line_args_parse.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_command_line_args_parse.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_command_line_args_parse.html#pp_command_line_args_parse", "pp_command_line_args_parse", 'routine in <a href="./pp_command_line_args_parse.html">pp_command_line_args_parse.pro</a>', "pp_command_line_args_parse.pro", "Paulo Penteado (http://www.ppenteado.net)  ", "pp_command_line_args_parse", "    Parses arguments provided in the command line into a more usable form:       simple arguments are provided as a list, in the order they were given in       the command line. Additionally, some arguments are parsed into a hash:        1) -foo is parsed as a hash element with key foo and value 1        2) --foo=bar is parsed as a hash element with key foo and value bar   ", "", "          -1", ":     Suposing the IDL session was started as: <span class= code-output > idl -args arg1 arg2 -key1 --key2=value1</span>    A call to pp_command_lne_args_parse will return: <span class= code-output > args=pp_command_line_args_parse()</span> <span class= code-output > help,args</span> <span class= code-output > ;** Structure &lt;19a2d18&gt;, 4 tags, length=16, data length=16, refs=1:</span> <span class= code-output > ;ARGCOUNT        LONG                 2</span> <span class= code-output > ;KEYCOUNT        LONG                 2</span> <span class= code-output > ;ARGUMENTS       OBJREF    &lt;ObjHeapVar75(LIST)&gt;</span> <span class= code-output > ;KEYWORDS        OBJREF    &lt;ObjHeapVar73(HASH)&gt;</span> <span class= code-output > print,args.arguments</span> <span class= code-output > ;arg1</span> <span class= code-output > ;arg2</span> <span class= code-output > print,args.keywords</span> <span class= code-output > ;key1:            1</span> <span class= code-output > ;key2: value1</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_connectivity_list.html", "pp_connectivity_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_connectivity_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_connectivity_list.html#pp_connectivity_list", "pp_connectivity_list", 'routine in <a href="./pp_connectivity_list.html">pp_connectivity_list.pro</a>', "pp_connectivity_list.pro", "Paulo Penteado (http://www.ppenteado.net), Feb/2016  ", "pp_connectivity_list", "    Converts a connectivity array, such as one used by     map_proj_forward,      to a list of arrays. Each list element is an array with the indices of the corresponding      line/polygon.   ", "conn      An array with a connectivity list, such as that used by       map_proj_forward,       which starts with an integer m0 specifying the number of vertices belonging to the first       line/polygon, followed by the m0 indices belonging to that line/polygon, followed by       an m1 integer specifying the number of indices belonging to the second line/polygon,       followed by the m1 indices of the second line/polygon, and so on.   ", "          -1", "   A list, where each element is the array of vertices belonging to that line/polygon    as specified by the input connectivity array.   ");
  
  

libdata[libdataItem++] = new Array("./pp_contour_paths.html", "pp_contour_paths.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_contour_paths.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_contour_paths.html#pp_contour_paths", "pp_contour_paths", 'routine in <a href="./pp_contour_paths.html">pp_contour_paths.pro</a>', "pp_contour_paths.pro", "Paulo Penteado (pp.penteado@gmail.com), Aug/2010  ", "pp_contour_paths", "    Simple wrapper for the contour procedure, used to extract the contour path     points, and pack them into a list.   ", "_ref_extra      Passed unchanged to/from contour.   z      Passed unchanged to contour.  x      Passed unchanged to contour.  y      Passed unchanged to contour.   ", "          -1", "IDL 8.0 or higher, for the lists and empty arrays.       A list where each element has the n x,y pairs of each contour level,     as a [2,x] array, or and empty array when the level has no points.   ");
  
  

libdata[libdataItem++] = new Array("./pp_convol.html", "pp_convol.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_convol.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2010  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_convol.html#pp_convol_test", "pp_convol_test", 'routine in <a href="./pp_convol.html">pp_convol.pro</a>', "pp_convol.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2010  ", "pp_convol_test", "    Examples to test and illustrate the different behaviors of pp_convol.      Makes up a high resolution spectrum and convolves it to lower resolutions.   ", "width      The width for the convolution kernels.   ", "          -1", "    Convolve spectra to different resolutions: <span class= code-output > .com pp_convol ;pp_convol_test is in pp_convol.pro, so it will not be found by itself</span> <span class= code-output > pp_convol_test,0.04</span> <span class= code-output > pp_convol_test,0.02</span>            pp_resample, pp_integral   ");
  
  libdata[libdataItem++] = new Array("./pp_convol.html#pp_convol", "pp_convol", 'routine in <a href="./pp_convol.html">pp_convol.pro</a>', "pp_convol.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2010  ", "pp_convol", "    Convolves the provided y(x) function with either a rectangular or Gaussian     kernel of the given width, or the provided arbitrary kernel (not yet implemented).      The x grid does not need to be regular, and, contrary to common practice, no resampling     is done to a regular grid to calculate the convolution (resampling is not needed). Also     contrary to common practice, for rectangular or Gaussian kernels the integral is done     analytically, not numerically. In the case of a Gaussian kernel, it extends from the Gaussian     center up to the point where the terms in the integral become 0 (at double precision).      Also, this routine allows for both literal and sampled interpretations of the input function (set     with the local keyword).   ", "step      If set, the convolution kernel is a rectangular function of the given width.  gaussian      If set, the convolution kernel is a Gaussian, of fwhm of the given width.  width      The width of the convolution kernel (for step or gaussian).  grid_tolerance      Not yet implemented. Specifies the maximum fractional variation in the input grid to accept it as uniform.        If the input grid is found to be uniform, the integration can be done faster.  kernelx      Not yet implemented. An array of the x locations (centered at x=0) of the arbitrary convolution kernel to use.        Must be ordered in increasing x.  kernely      Not yet implemented. An array of the the arbitrary convolution kernel's values to use.       Must make a function of unit area.  local      If not set, the y values are interpreted as a measured sample, that is, as the average of the  flux  falling inside the region       centered at the corresponding x values: x locations are interpreted as the centers of bins. Since this interpretation is equivalent       to a literal interpretation of a function made of rectangular regions, in this method there are no interpolations (partial areas, if       any, are just the corresponding fractions of the rectangles).        If set, interprets the input function literally.  newton      Passed on to pp_integral. If local is set and newton is set, the function integrations are done with int_tabulated, which       uses a 5 point Newton-Cotes formula. If local is not set, this has no effect.  lsquadratic      Passed on to pp_integral. If the method requires interpolation, this is passed on to interpol,       to select 4 point quadratic interpolation.        If none of lsquadratic, quadratic and spline are set, interpolation is linear.  quadratic      Passed on to pp_integral. If the method requires interpolation, this is passed on to interpol,       to select 3 point quadratic interpolation.        If none of lsquadratic, quadratic and spline are set, interpolation is linear.  spline      Passed on to pp_integral. If the method requires interpolation, this is passed on to interpol,       to select spline interpolation.        If none of lsquadratic, quadratic and spline are set, interpolation is linear.  xinc      Returns the x values, in increasing order.  yinc      Returns the y values, in order of increasing x.  xstart      If local is not set, returns the location where each input pixel starts. If local is set, this is ignored.  xend      If local is not set, returns the location where each input pixel ends. If local is set, this is ignored.  xbox      Used when not in local mode, to return the input x values in pairs of equal values, so that       plotting xbox,ybox shows the rectangles that are how the input values were interpreted.  ybox      Used when not in local mode, to return the input y values in pairs of equal values, so that       plotting xbox,ybox shows the rectangles that are how the input values were interpreted.   y      An array with the function values corresponding to the locations in x.   x      An array of locations where the function is sampled. Must be ordered (increasing or decreasing).  ", "          -1", "   Make a well-sampled input function y(x) with fwhm=1: <span class= code-output > x=(12d0*dindgen(1001)/1d3)-6d0</span> <span class= code-output > y=exp(-(x^2*4d0*alog(2d0)))*8d0</span> <span class= code-output > iplot,x,y,/isotropic,name='Original function of fwhm=1',/insert_legend,thick=2.</span>    Do the convolution and look at the results: <span class= code-output > yc1=pp_convol(y,x,/step,width=4d0)</span> <span class= code-output > iplot,x,yc1,/over,color=[255,0,0],name='Convolution width=4, rectangular kernel (sampled)',/insert_legend</span> <span class= code-output > yc2=pp_convol(y,x,/step,/local,width=4d0)</span> <span class= code-output > iplot,x,yc2,/over,color=[0,0,255],name='Convolution width=4, rectangular kernel (literal)',/insert_legend</span> <span class= code-output > yc3=pp_convol(y,x,/gaussian,width=4d0)</span> <span class= code-output > iplot,x,yc3,/over,color=[0,255,0],name='Convolution width=4, Gaussian kernel (sampled)',/insert_legend</span> <span class= code-output > yc4=pp_convol(y,x,/gaussian,width=4d0,/local)</span> <span class= code-output > iplot,x,yc4,/over,color=[255,0,255],name='Convolution width=4, Gaussian kernel (literal)',/insert_legend</span>          See also the example in pp_convol_test, for a comparison of the methods with a more realistic (spectrum-like) function.   Implement arbitrary kernel, grid_tolerance, and quadratic and cubic Gaussian integrations.   pp_resample, pp_integral       The result of the convultion is given for the same x locations as the input,     there is no automatic resampling. If resampling is intended after the convolution,     pp_resampled is recommended, as it preserves the areas.   ");
  
  

libdata[libdataItem++] = new Array("./pp_dos2unix.html", "pp_dos2unix.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_dos2unix.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_dos2unix.html#pp_dos2unix", "pp_dos2unix", 'routine in <a href="./pp_dos2unix.html">pp_dos2unix.pro</a>', "pp_dos2unix.pro", "", "pp_dos2unix", "pro pp_dos2unix,file,inv=inv Similar to the console application dos2unix, converts the newlines of a text file between CR+LF (Windows) and LF (Linux). file is a string with the file name, which gets overwritten If inverse is set, writes the file with CR+LF instead of just LF Written by Paulo Penteado (pp.penteado@gmail.com), Aug/2009  ", "inversefile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_drawsphericalpoly.html", "pp_drawsphericalpoly.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_drawsphericalpoly.pro", "Paulo Penteado (http://www.ppenteado.net), Aug/2015  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_drawsphericalpoly.html#pp_drawsphericalpoly", "pp_drawsphericalpoly", 'routine in <a href="./pp_drawsphericalpoly.html">pp_drawsphericalpoly.pro</a>', "pp_drawsphericalpoly.pro", "Paulo Penteado (http://www.ppenteado.net), Aug/2015  ", "pp_drawsphericalpoly", "    Draws polygons on a map, with the polygon sides resampled to a large number     of vertices, so that the result resembles a spherical polygon (a polygon where     the sides are great circle arcs). Polygons can be drawn on Coyote Graphics,     iTools, Function Graphics or Direct Graphics. Se examples below.     Makes use of pp_sphericalpath to calculate the polygonal approximation to     the spherical polygon.   ", "_ref_extra      Any extra arguments are passed to the polygon plotting routine: cgpolygon if       cg is selected, ipolygon if itool is selected, polygon() if graphics is       selected, or polyfill, if direct is selected.  rgb_table      The color table to be used to map intensities into colors. This can be either       a scalar, which will be used to select one of IDL's predefined colortables       (0 is grayscale), or a [3,256] array of color triples, or a 256-element array       of long integers.  cg      If set, plotting is made with Coyote Graphics' cgpolygon.  graphics      If set, plotting is made with IDL's Function Graphics' polygon().  itool      If set, plotting is made with IDL's iTools' ipolygon.  direct      If set, plotting is made with IDL's Direct Graphics' polyfill.  maxlength      Passed on to pp_sphericalpath, determines the maximum length of the polygon       sides used for plotting, in degrees.  nsegments      Passed on to pp_sphericalpath, determines the number of segments to use for       the polygon sides.  polygon      If Function Graphics or iTools are being used for plotting, returns the polygon       object created with them.  x      If Function Graphics or iTools are being used for plotting, arrays of x and y points       get created, one for each vertex of all polygons plotted. This keyword returns       the x coordinates of the vertices created.  y      If Function Graphics or iTools are being used for plotting, arrays of x and y points       get created, one for each vertex of all polygons plotted. This keyword returns       the y coordinates of the vertices created.  connectivity      If Function Graphics or iTools are being used for plotting, arrays of x and y points       get created, one for each vertex of all polygons plotted. This keyword returns       the connectivity array which specifies which vertices belong to each polygon. See IDL's help       on polygon() for more details.  fill      If Coyote Graphics' cgpolygon is being used, this keyword determines if       the polygons are drawn just as outlines, or should be filled (outlines and       fills share the same colors).  stackmap      if do_stack is turned on, this argument returns the stacked map generated. If the algorithm       selected is do_stack=1, this will be an array of dimensions [maxstack,xsize,ysize], where       [xsize,ysize] are the dimensions of the map created, and maxstack specifies the maximum number       layers the map stack can have. At a given location [x,y] in the map, the values stackmap[*,x,y]       are all the values present in icolors that fell onto that location on the map. The argument       stackcount is often useful, as it records how many layers were stacked at each location in the       map. This will probably be more clearly explained by the examples below.  original_imagemaxstack      Specifies the first dimension of the stackmap array, which is the maximum number of layers being       tracked falling on each location on the map. If not set, it defaults to the number of polygons provided       in ilons, ilats, icolors. If there are many polygons, it is probably wise to specify a smaller       value for maxstack, to avoid using too much memory. Use stackcount to check that at no location in the       map there were polygons missed because that location had more overlapping layers than could fit into       stackmap: if stackcount is everywhere smaller than or equal to maxstack, no polygons were lost in       stackmap.  stackliststackcount      if do_stack is turned on, this argument returns the count of stacked layers in the stackmap       generated. At a given location [x,y] in the map, stackcount[x,y] is the number of polygons that       fell on that map location (the number of layers in stackmap at that location). This will probably       be more clearly explained by the examples below.  verbose do_stack      If set to 1, instead of drawing the polygons on the graphics device, a z-buffer will be used       to draw polygons in an invisible direct graphics window, which are used to generate a map of       where each polygon falls (stackmap). This will probably be more clearly explained by the       examples below. Note that setting do_stack to a value higher than 1 is not the same as setting       it to 1: other values turn on alternative stack algorithms, which at this time are still       experimental and thus not yet documented.  weightsstackweightsstackindex      If do_stack is turned on, this argument returns the an array similar to stackmap, but its values       are the indices to of the polygons that fall on each location, instead of being the intensities (icolors).  pcount      If do_stack is turned on, this argument returns the an array with the number of map pixels covered       by each polygon.  no_fix_lonmap_structureimage_mapstr      If do_stack is set to 1, this argument will return the map structure created by map_set, which is       used to define the map projection used to make stackmap.  xsize      If do_stack is set to 1, this specifies the width of the map to generate (see stackmap).  ysize      If do_stack is set to 1, this specifies the height of the map to generate (see stackmap).  e_map      If do_stack is set to 1, set this argument to a structure containing any parameters to be passed       to map_set, which is used to define the map projection used to make stackmap. This will probably       be more clearly explained by the examples below.  bminbmaxbnanbtopilons      An array of longitudes for the vertices which are to be connected by a path made of great circles.       Must be in degrees. Multiple polygons are supported in two different ways: 1) If all N polygons have       the same number of vertices (M), lons can be given as a [M,N] array. 2) For arbitrary numbers of vertices,       lons is given as a list, where each list element is an array of vertices for one polygon.  ilats      An array of latitudes for the vertices which are to be connected by a path made of great circles.       Must be in degrees. Multiple polygons are supported in two different ways: 1) If all N polygons have       the same number of vertices (M), lats can be given as a [M,N] array. 2) For arbitrary numbers of vertices,       lons is given as a list, where each list element is an array of vertices for one polygon.  icolors      An array with the color to be used to draw/fill the polygons. If rgb_table       is not given, this array is assumed to contain the colors in the system used       by the kind of plotting selected: either a [3,M] array of color triplets, one triple       per each of the M polygons, or a long integer array, with one long-integer-coded       color for each of the M polygons.       If rgb_table is given, then colors can be an array of any numerical type, and       the polygon colors will be determined by mapping the values in colors to       values in the 256-value colortable specified by rgb_table.   ", "          -1", "      First, let's create some data to plot: <span class= code-output > ;create several rectangles</span> <span class= code-output > lons=dblarr(4,10)</span> <span class= code-output > for i=0,9 do lons[*,i]=[-85d0,-65d0,-55d0,-75d0]+i*25d0</span> <span class= code-output > lats=dblarr(4,10)</span> <span class= code-output > for i=0,9 do lats[*,i]=[-65d0,55d0,45d0,-75d0]</span> <span class= code-output > ;set their colors</span> <span class= code-output > colors=dindgen(10)</span>      Now, plot the rectangles on a Graphics map: <span class= code-output > m=map('mollweide')</span> <span class= code-output > pp_drawsphericalpoly,lons,lats,colors,rgb_table=13,linestyle='none'</span>               Plot the rectangles on an imap: <span class= code-output > imap,map_projection='sinusoidal'</span> <span class= code-output > pp_drawsphericalpoly,lons,lats,colors,rgb_table=13,linestyle='none',/itool</span>               Plot the rectangles on a Coyote Graphics map: <span class= code-output > m=cgmap('robinson',/erase,/isotropic,/window)</span> <span class= code-output > cgmap_grid,map=m,/box,/addcmd</span> <span class= code-output > cgloadct,13</span> <span class= code-output > pp_drawsphericalpoly,lons,lats,bytscl(colors),/cg,/fill,map=m,/addcmd</span>               Plot the rectangles on a Direct Graphics map: <span class= code-output > map_set,0d0,0d0,/cylindrical,/isotropic,/grid,/label</span> <span class= code-output > pp_drawsphericalpoly,lons,lats,colors,rgb_table=13,/direct</span>               Now, let's make some data that spans the tricky region around the pole: <span class= code-output > ;make up the coordinates for the coordinates of 3 rectangular fields of view near the north pole:</span> <span class= code-output > lons=[[20d0,240d0,260d0,0d0],[80d0,180d0,200d0,60d0],[50d0,210d0,230d0,30d0]]</span> <span class= code-output > lats=[[62d0,60d0,60d0,62d0],[62d0,60d0,60d0,62d0],[65d0,67d0,67d0,65d0]]</span> <span class= code-output > ;make up some pixel values to determine the color used to fill the 3 rectangles</span> <span class= code-output > pixvals=dindgen(3)</span>       Create an imap to plot these polygons: <span class= code-output > imap,map_proj='orthographic',center_lat=60d0</span>       Draw the polygons: <span class= code-output > pp_drawsphericalpoly,lons,lats,pixvals,rgb_table=13,/itool</span>               Now, an example with overlapping polygons, making an overlap map and taking the       mean of the values on overlap: <span class= code-output > lats=[[62d0,60d0,60d0,62d0],[62d0,60d0,60d0,62d0],[70d0,72d0,72d0,70d0],[80d0,87d0,87d0,80d0]]</span> <span class= code-output > lons=[[40d0,220d0,250d0,0d0],[80d0,180d0,200d0,60d0],[50d0,200d0,240d0,20d0],[70d0,70d0,95d0,95d0]]</span> <span class= code-output > pixvals=[0d0,-1d0,-3d0,2d0]</span>       First, take a look at the overlayed polygons: <span class= code-output > m=map('orthographic',center_lat=30d0)</span>               Now, make the stack map: <span class= code-output > pp_drawsphericalpoly,lons,lats,pixvals,rgb_table=13</span> <span class= code-output > limit=[-90,-180,90,180]</span> <span class= code-output > e_map={cylindrical:1,noborder:1,xmargin:0,ymargin:0,limit:limit,isotropic:1}</span> <span class= code-output > pp_drawsphericalpoly,lons,lats,pixvals,do_stack=1,stackc=stackc,e_map=e_map,xsize=3000,ysize=1500,maxstack=4,stackm=stackm</span>       Look at the coverage map - an array where each value is the number of polygons that fell onto that place on the map: <span class= code-output > im0=image(stackc,map_projection='equirectangular',grid_units=2,image_location=limit[[1,0]],image_dimensions=[limit[3]-limit[1],limit[2]-limit[0]],dimensions=[900,500],color='cyan',aspect_ratio=5.,limit=[30,-180,90,180])</span> <span class= code-output > im1=image(stackc,map_projection='orthographic',center_lat=30,grid_units=2,image_location=limit[[1,0]],image_dimensions=[limit[3]-limit[1],limit[2]-limit[0]],,dimensions=[900,500],color='cyan',rgb_table=13)</span>                      Make an average image from stackm, by taking then mean over the stack (first) dimension: <span class= code-output > stackmean=mean(stackm,dimension=1,/nan)</span> <span class= code-output > im2=image(stackmean,map_projection='orthographic',center_lat=90,grid_units=2,image_location=limit[[1,0]],image_dimensions=[limit[3]-limit[1],limit[2]-limit[0]],dimensions=[900,500],color='cyan',rgb_table=13)</span>             If Coyote Graphics are to be used, the Coyote Library    needs to be installed.     Also needed are pp_sphericalpath, pp_longtocolortriple, pp_colortripletolong,    and tessellateshapes_pp, from pp_lib).   ");
  
  

libdata[libdataItem++] = new Array("./pp_extractfields.html", "pp_extractfields.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_extractfields.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_extractfields.html#pp_extractfields", "pp_extractfields", 'routine in <a href="./pp_extractfields.html">pp_extractfields.pro</a>', "pp_extractfields.pro", "Paulo Penteado (pp.penteado@gmail.com)  ", "pp_extractfields", "    Given a string containing a comma-separated sequence of values, returns     a string array with each value. Values can be quoted strings, in which case     they can contain a comma inside them (which is why this routine exists, otherwise     strsplit could do the job). Either type of quote can be used to mark the strings, but     each string must be finished with the same type of quote it started.   ", "str      The string containing the comma-separated fields.  count      The number of fields found.   ", "          -1", "   Split ' 1,2 , 2 , 3 , 4 ' into its fields: <span class= code-output > print,pp_extractfields(' 1,2 , 2 , 3 , 4 ',count),count</span> <span class= code-output > ; 1,2   2   3   4 </span> <span class= code-output > ;       4</span>       A string array where each element is one of the comma-separated fields in str.   ");
  
  

libdata[libdataItem++] = new Array("./pp_gauss_from_fwhm.html", "pp_gauss_from_fwhm.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_gauss_from_fwhm.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2010  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_gauss_from_fwhm.html#pp_gauss_from_fwhm", "pp_gauss_from_fwhm", 'routine in <a href="./pp_gauss_from_fwhm.html">pp_gauss_from_fwhm.pro</a>', "pp_gauss_from_fwhm.pro", "", "pp_gauss_from_fwhm", "    Evaluates a normalized Gaussian distribution of mean zero and the provided     width at the provided locations (x). The width can be provided from the     standard deviation (sigma) or the FWHM (fwhm).   ", "fwhm      Specifies the width of the Gaussian, as its Full Width Half Maximum (FWHM).       If both sigma and fwhm are provided, fwhm takes precedence.  sigma      Specifies the width of the Gaussian, as its Full Width Half Maximum (FWHM).       If both sigma and fwhm are provided, fwhm takes precedence.   x      The locations where the Gaussian is to be evaluated.   ", "          -1", "   Make a domain where the Gaussian is to be evaluated: <span class= code-output > nx=201</span> <span class= code-output > x=(dindgen(nx)/(nx-1d0)-0.5d0)*5d0</span>    Make a Gaussian with fwhm=1 and plot it: <span class= code-output > yg=pp_gauss_from_fwhm(x,fwhm=1d0)</span> <span class= code-output > pg=plot(x,yg,color='red',name='Gaussian, FWHM=1d0',thick=2.)</span>    Now compare with a Lorentzian (made with pp_lorentz_from_fwhm): <span class= code-output > yl=pp_lorentz_from_fwhm(x,fwhm=1d0)</span> <span class= code-output > pl=plot(x,yl,color='blue',name='Lorentzian, FWHM=1d0',thick=2.,/over)</span> <span class= code-output > l=legend(target=[pg,pl],position=[0.5,0.5]) ;Identify the two lines</span>    Save the result into the file shown below: <span class= code-output >   pg.save,'pp_gauss_from_fwhm.png',resolution=100</span>        ");
  
  

libdata[libdataItem++] = new Array("./pp_getcurrentlights.html", "pp_getcurrentlights.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_getcurrentlights.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_getcurrentlights.html#pp_getcurrentlights", "pp_getcurrentlights", 'routine in <a href="./pp_getcurrentlights.html">pp_getcurrentlights.pro</a>', "pp_getcurrentlights.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2011  ", "pp_getcurrentlights", "    Retrieves one or both of the default lights made when a surface is created in     iTools or Graphics. These lights are one ambient light and one directional light.     By default, the directional light is returned.     The current graphic (iTool or Graphics) is used by default, if id is not     provided.   ", "ambient      If set, the ambient light is the one retrieved.  directional      If set, the directional light is the one retrieved.  all      If set, both lights are retrieved, in a two-element array, with the ambient       light first.  tool      Returns the object associated with the graphic. Most useful to do a call       to tool.commitactions after a change in the light properites (see the example).  id      The tool id of the graphic to operate on. This is processed by pp_gettoolid:       If not provided, the current (if any) is used, and its ID is returned in this       variable. If one is provided but is not valid, the current one is obtained       instead, and returned in this variable. This can also be a Graphics identifer       (as from the getfullidentifier method), in which case this variable will be       altered to return the corresponding tool ID.   ", "          -1", "   Make a simple surface, retrieve its directional light and move it: <span class= code-output > surf=surface(dist(100))</span>    This should look like             Then the direction can be retireved and changed with: <span class= code-output > dir_light=pp_getcurrentlights(tool=ot,id=surf.getfullidentifier())</span> <span class= code-output > dir_light.getproperty,location=location</span> <span class= code-output > print,location</span> <span class= code-output > ;  -0.00010000000   0.00010000000   0.00010000000</span> <span class= code-output > dir_light.setproperty,location=-location</span>    Update the rendering to show the changes done: <span class= code-output > ot.commitactions</span>    Which should look like           pp_gettoolid   ");
  
  

libdata[libdataItem++] = new Array("./pp_gettoolid.html", "pp_gettoolid.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_gettoolid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_gettoolid.html#pp_gettoolid", "pp_gettoolid", 'routine in <a href="./pp_gettoolid.html">pp_gettoolid.pro</a>', "pp_gettoolid.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2010  ", "pp_gettoolid", "    Returns a valid (if any) tool ID, from the supplied (if any) id. This is useful     inside routines that operate on iTools or Graphics, that have an input ID, but     want to revert to the current tool if that is not provided or not valid.     Also useful to retrieve a tool ID from a Graphics full identifier (as from the     getfullidentifier method).   ", "tool      Returns the tool object associated with that id.   id      The ID to try to use to retrieve the actual tool ID.  If the       provided ID is valid, it is returned. Otherwise, if it is a Graphics full       identifier (as from the getfullidentifier method), the returned ID is the corresponding       tool ID. If it is not valid, the current tool ID (if any) is returned.   ", "          -1", "    Make a couple of tools and see their IDs: <span class= code-output > p=plot(/test,identifier=p_identifier)</span> <span class= code-output > print,p_identifier</span> <span class= code-output > ;/TOOLS/GRAPHIC</span> <span class= code-output > print,p.getfullidentifier()</span> <span class= code-output > ;/TOOLS/GRAPHIC/WINDOW/VIEW_1/VISUALIZATION LAYER/DATA SPACE/PLOT</span> <span class= code-output > print,pp_gettoolid(p.getfullidentifier())</span> <span class= code-output > ;/TOOLS/GRAPHIC</span> <span class= code-output > iplot,identifier=ip_identifier</span> <span class= code-output > print,ip_identifier</span> <span class= code-output > ;/TOOLS/PLOT TOOL</span> <span class= code-output > print,pp_gettoolid()</span> <span class= code-output > ;/TOOLS/PLOT TOOL</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_gui__define.html", "pp_gui__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_gui__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_gui__define.html#pp_gui::eventhandler", "pp_gui::eventhandler", 'routine in <a href="./pp_gui__define.html">pp_gui__define.pro</a>', "pp_gui__define.pro", "", "pp_gui::eventhandler", "    A wrapper for toplevelbase's eventhandler, populated just with the handler     for the exit button, and to save the event value into self.values (a hash     indexed by the event object's name). Typically, the user will want to override     this method, to add whatever handling will be needed.   ", "event      The event to be processed. See http://www.exelisvis.com/docs/routines-120.html.   ", "          -1", "    See the example application pp_gui_example.   ");
  
  libdata[libdataItem++] = new Array("./pp_gui__define.html#pp_gui::updatewindow", "pp_gui::updatewindow", 'routine in <a href="./pp_gui__define.html">pp_gui__define.pro</a>', "pp_gui__define.pro", "", "pp_gui::updatewindow", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_gui__define.html#pp_gui::setproperty", "pp_gui::setproperty", 'routine in <a href="./pp_gui__define.html">pp_gui__define.pro</a>', "pp_gui__define.pro", "", "pp_gui::setproperty", "    A standard setproperty method. Anything not handled here is passed on to     toplevelbase.   ", "_extra      Passed on toplevelbase.  debugevent      If set, the event handler will print event iformation everytime it is called.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_gui__define.html#pp_gui::getproperty", "pp_gui::getproperty", 'routine in <a href="./pp_gui__define.html">pp_gui__define.pro</a>', "pp_gui__define.pro", "", "pp_gui::getproperty", "    A standard getproperty method. Anything not handled here is passed on to     toplevelbase.   ", "_ref_extra      Passed on toplevelbase.  debugevent      If set, the event handler will print event iformation everytime it is called.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_gui__define.html#pp_gui::init", "pp_gui::init", 'routine in <a href="./pp_gui__define.html">pp_gui__define.pro</a>', "pp_gui__define.pro", "", "pp_gui::init", "    Wraps toplevelbase's init, creating a sekeleton for the graphical interface     and launching it. The elements of the interface are created in the method     pp_gui::greategui. Typically, the user will want to define the interface by     creating another creategui method.   ", "debugevent      If set, the eventhandler will print out event information everytime it is called.  _ref_extra      Parameters passed down to Catalyst's toplevelbase.  xsize      The x size of the window.  ysize      The y size of the window.  title      The title for the window.  row      Passed on to toplevelbase.  column      Passed on to toplevelbase.   mbar", "          -1", "    See the example application pp_gui_example.   ");
  
  libdata[libdataItem++] = new Array("./pp_gui__define.html#pp_gui::creategui", "pp_gui::creategui", 'routine in <a href="./pp_gui__define.html">pp_gui__define.pro</a>', "pp_gui__define.pro", "", "pp_gui::creategui", "    This method is called by init, to populate the interface with the elements     the user will want. Typically, the user will override this method, to add all     the other elements.   ", "", "          -1", "    See the example application pp_gui_example.   ");
  
  libdata[libdataItem++] = new Array("./pp_gui__define.html#pp_gui__define", "pp_gui__define", 'routine in <a href="./pp_gui__define.html">pp_gui__define.pro</a>', "pp_gui__define.pro", "", "pp_gui__define", "    Just the class definition for pp_gui   ", "", "          -1", "    See the example application pp_gui_example.   ");
  
  

libdata[libdataItem++] = new Array("./pp_gui_example__define.html", "pp_gui_example__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_gui_example__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_gui_example__define.html#pp_gui_example::init", "pp_gui_example::init", 'routine in <a href="./pp_gui_example__define.html">pp_gui_example__define.pro</a>', "pp_gui_example__define.pro", "", "pp_gui_example::init", "    Describe the procedure.   ", "_extra      Any other parameters are passed on to pp_gui.   data      A 3D array with several images to be displayed. The images must be contiguous       over the first two dimensions. That is, the third dimension must be where the       different images are indexed.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_gui_example__define.html#pp_gui_example::creategui", "pp_gui_example::creategui", 'routine in <a href="./pp_gui_example__define.html">pp_gui_example__define.pro</a>', "pp_gui_example__define.pro", "", "pp_gui_example::creategui", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_gui_example__define.html#pp_gui_example::updatewindow", "pp_gui_example::updatewindow", 'routine in <a href="./pp_gui_example__define.html">pp_gui_example__define.pro</a>', "pp_gui_example__define.pro", "", "pp_gui_example::updatewindow", "    This method gets called by the event handler after it has finished processing     the event. We use it to do whatever is necessary to update the widgets. In     this case, the only thing to do is to replace the image in the draw widget.   ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_gui_example__define.html#pp_gui_example__define", "pp_gui_example__define", 'routine in <a href="./pp_gui_example__define.html">pp_gui_example__define.pro</a>', "pp_gui_example__define.pro", "", "pp_gui_example__define", "    Just the class definition for pp_gui_example.   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_histogramlines.html", "pp_histogramlines.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_histogramlines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_histogramlines.html#pp_histogramlines", "pp_histogramlines", 'routine in <a href="./pp_histogramlines.html">pp_histogramlines.pro</a>', "pp_histogramlines.pro", "Paulo Penteado (pp.penteado@gmail.com), Jan/2013  ", "pp_histogramlines", "    Makes x and y coordinates to make a histogram plot that looks the usual way,     with lines connecting the histogram counts to y=0 at each side of each bin.   ", "x      The x coordinate to use in the plot. See example below.  y      The y coordinate to use in the plot. See example below.   locations      The coordinate of the start of each bin (like what is returned by IDL's histogram().       See example below.  histogram_counts      The count for each bin. See example below.   ", "          -1", "    Create an array with 10000 Gaussian-distributed doubles and plot a histogram: <span class= code-output > values=randomu(seed,10000,/normal,/double)</span> <span class= code-output > hist=histogram(values,min=-3d0,max=3d0,binsize=0.1,locations=loc)</span> <span class= code-output > pp_histogramlines,loc,hist,x=x,y=y</span> <span class= code-output > iplot,x,y,color='red',name='Gaussian',insert_legend=[0.3,0.5],thick=2.</span>     Now add a histogram for 10000 Gamma(1)-distributed doubles: <span class= code-output > values=randomu(seed,10000,gamma=1d0,/double)</span> <span class= code-output > hist=histogram(values,min=-3d0,max=3d0,binsize=0.1,locations=loc)</span> <span class= code-output > pp_histogramlines,loc,hist,x=x,y=y</span> <span class= code-output > iplot,x,y,color='blue',name='Gamma(1)',/insert_legend,/over,thick=2.</span>     Which would result in         ");
  
  

libdata[libdataItem++] = new Array("./pp_ilegend__define.html", "pp_ilegend__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_ilegend__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Mar/2014   ", "", " This object allows adding separate legend boxes to an iTool. Once a new legend box is created,  items can be added to it. After there are 2 or more legend boxes, any additional legend items must  be added with this object's additem method. See example below.   ", "", "          -1", "20140318       Make some plot, with a legend: <span class= code-output > iplot,[0,1],name='a',/insert_legend</span>     Make another plot, with its name, but do not add the legend yet (or it would go into the first legend box): <span class= code-output > iplot,[0,0],name='b',/over</span>     Now create the second legend box, at location [0,0.5], adding the last plot to it - this must be done at a time     when there is a plot object selected (as is the case just after a plot is created): <span class= code-output > leg=pp_ilegend([0d0,0.5d0])</span>     Now create another plot, and add it to the second legend box - the item to be added to the legend is the     currently selected one: <span class= code-output > iplot,[0,-1],name='c',/over</span> <span class= code-output > leg.additem</span>     The result should look like           IDL 8.0   ");
  
  
  libdata[libdataItem++] = new Array("./pp_ilegend__define.html#pp_ilegend::init", "pp_ilegend::init", 'routine in <a href="./pp_ilegend__define.html">pp_ilegend__define.pro</a>', "pp_ilegend__define.pro", "", "pp_ilegend::init", "", "verboseloc", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_ilegend__define.html#pp_ilegend::additem", "pp_ilegend::additem", 'routine in <a href="./pp_ilegend__define.html">pp_ilegend__define.pro</a>', "pp_ilegend__define.pro", "", "pp_ilegend::additem", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_ilegend__define.html#pp_ilegend__define", "pp_ilegend__define", 'routine in <a href="./pp_ilegend__define.html">pp_ilegend__define.pro</a>', "pp_ilegend__define.pro", "", "pp_ilegend__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_ilegendedit.html", "pp_ilegendedit.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_ilegendedit.pro", "Paulo Penteado (pp.penteado@gmail.com), Mar/2014   ", "", " This procedure allows editing some properties of an iTool legend that are not easiy accessible  programatically. See example below.   At this time, only hiding/unhiding the legend box is implemented.   ", "", "          -1", "20140318       Make some plot, with a legend, then hide its box: <span class= code-output > iplot,[0,1],name='a',/insert_legend</span> <span class= code-output > pp_ilegendedit,/hidebox</span>     Now unhide it: <span class= code-output > pp_ilegendedit,hidebox=0</span>     Working with multiple legends:      By defaut, pp_ilegendedit will act over every legend on thw current iTool. To limit its action     to a subset of the legends, use the optional argument specifying which legend(s) to edit, a a scalar     (edit one legend, identified by that index), or an array, where each element is the index of one     legend to edit. Legend indexes start at 0: <span class= code-output >    iplot,[0,1],name='a',/insert_legend</span> <span class= code-output >    iplot,[0,0],name='b',/over</span> <span class= code-output >    leg=pp_ilegend([0d0,0.5d0])</span> <span class= code-output >    pp_ilegendedit,1,/hidebox=; will act only on the second legend</span>  IDL 8.0   ");
  
  
  libdata[libdataItem++] = new Array("./pp_ilegendedit.html#pp_ilegendeditor::init", "pp_ilegendeditor::init", 'routine in <a href="./pp_ilegendedit.html">pp_ilegendedit.pro</a>', "pp_ilegendedit.pro", "", "pp_ilegendeditor::init", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_ilegendedit.html#pp_ilegendeditor::changeproperty", "pp_ilegendeditor::changeproperty", 'routine in <a href="./pp_ilegendedit.html">pp_ilegendedit.pro</a>', "pp_ilegendedit.pro", "", "pp_ilegendeditor::changeproperty", "", "hideboxlegend", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_ilegendedit.html#pp_ilegendeditor__define", "pp_ilegendeditor__define", 'routine in <a href="./pp_ilegendedit.html">pp_ilegendedit.pro</a>', "pp_ilegendedit.pro", "", "pp_ilegendeditor__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_ilegendedit.html#pp_ilegendedit", "pp_ilegendedit", 'routine in <a href="./pp_ilegendedit.html">pp_ilegendedit.pro</a>', "pp_ilegendedit.pro", "", "pp_ilegendedit", "", "_ref_extralegend", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_integral.html", "pp_integral.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_integral.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_integral.html#pp_integral", "pp_integral", 'routine in <a href="./pp_integral.html">pp_integral.pro</a>', "pp_integral.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2010  ", "pp_integral", "    Calculates the area under the y(x) curve provided. The function must be ordered in x, but it does not     matter whether the order is increasing or decreasing.      There are two possible ways that the input function is interpreted, determined by the keyword local.     See the description of local below, since it may significantly alter the result.      If the method selected requires interpolation, it can be linear, 3 or 4-point quadratic, or spline. This is determined     by setting the quadratic, lsquadratic, or spline keywords (linear if none of these 3 keywords is set).   ", "xmin      A scalar or array with the start of the range(s) where the area is to be calculated. If not provided,       the minimum location of the function is used. Must have the same number of elements as xmax, and every       element in xmin must be smaller than or equal to the corresponding element in xmax. If any value of xmin       is smaller than the beginning of the x range, it is clipped to the beginning.  xmax      A scalar or array with the end of the range(s) where the area is to be calculated. If not provided,       the maximum location of the function is used. Must have the same number of elements as xmin, and every       element in xmax must be larger than or equal to the corresponding element in xmin. If any value of xmax       is larger than the end of the x range, it is clipped to the end.  cumulative      If set, and xmin and xmax are not provided, the areas returned are the cumulative areas at the end of each x point,       starting at the first x point. If xmax and xmin are provided, this keyword is ignored.  xinc      Returns the x values, in increasing order.  yinc      Returns the y values, in order of increasing x.  xstart      If local is not set, returns the location where each input pixel starts. If local is set, this is ignored.  xend      If local is not set, returns the location where each input pixel ends. If local is set, this is ignored.  xbox      Used when not in local mode, to return the input x values in pairs of equal values, so that       plotting xbox,ybox shows the rectangles that are how the input values were interpreted.  ybox      Used when not in local mode, to return the input y values in pairs of equal values, so that       plotting xbox,ybox shows the rectangles that are how the input values were interpreted.  newton      If local is set and newton is set, the function integrations are done with int_tabulated, which       uses a 5 point Newton-Cotes formula. If not set, trapezoid integration is done. If local is not set, this has no effect.  local      Determines how the input function is interpreted, which determines how the areas are calculated. If set, the function is       interpreted literally, that is, as in a simple mathematical function: the y values are the local evaluation y(x).        If not set, the y values are interpreted as a measured sample, that is, as the average of the  flux  falling inside the region       centered at the corresponding x values: x locations are interpreted as the centers of bins. Since this interpretation is equivalent       to a literal interpretation of a function made of rectangular regions, in this method there are no interpolations (partial areas, if       any, are just the corresponding fractions of the rectangles).  lsquadratic      If the method requires interpolation, this is passed on to interpol, to select 4 point quadratic interpolation.        If none of lsquadratic, quadratic and spline are set, interpolation is linear.  quadratic      If the method requires interpolation, this is passed on to interpol, to select 3 point quadratic interpolation.        If none of lsquadratic, quadratic and spline are set, interpolation is linear.  spline      If the method requires interpolation, this is passed on to interpol, to select spline interpolation.        If none of lsquadratic, quadratic and spline are set, interpolation is linear.   x      An array of locations where the function is sampled. Must be ordered (increasing or decreasing).  y      An array with the function values corresponding to the locations in x.  ", "          -1", "   Make up a simple constant function to show the difference between local and non-local modes: <span class= code-output > x=[0d0,1d0]</span> <span class= code-output > y=[2d0,2d0]</span> <span class= code-output > print,pp_integral(x,y,xmin=xmin,xmax=xmax)</span> <span class= code-output > ;4.0000000</span> <span class= code-output > print,xmin,xmax</span> <span class= code-output > ;-0.50000000       1.5000000</span> <span class= code-output > ;(the x locations are considered the middle of the bins, so the bins extend beyond the range min(x),max(x))</span> <span class= code-output > print,pp_integral(x,y,xmin=lxmin,xmax=lxmax,/local)</span> <span class= code-output > ;2.0000000</span> <span class= code-output > print,lxmin,lxmax</span> <span class= code-output > ;0.0000000       1.0000000</span>    Make up a well sampled function, so that the difference between local and non-local is small: <span class= code-output > x=dindgen(10001)*!dpi/1d4</span> <span class= code-output > y=sin(x)</span> <span class= code-output > a=pp_integral(x,y,xmin=[0d0,0d0],xmax=!dpi*[0.5d0,1d0])</span> <span class= code-output > b=pp_integral(x,y,xmin=[0d0,0d0],xmax=!dpi*[0.5d0,1d0],/local)</span> <span class= code-output > print,a</span> <span class= code-output > ;1.0003142       2.0000000</span> <span class= code-output > print,b</span> <span class= code-output > ;1.0000000       2.0000000</span> <span class= code-output > print,a-b</span> <span class= code-output > ;0.00031410992  -4.9348009e-08</span>        If xmin and xmax are not provided, returns the area under the curve over its whole extension.      If xmin and xmax are scalars, returns the area between these x values. If they are arrays of n elements,     returns the n areas, calculated starting at each xmin element, and ending at the corresponding xmax element.      Every value in xmax is must be larger than or equal to the correspoinding value in xmin.   ");
  
  

libdata[libdataItem++] = new Array("./pp_isnumber.html", "pp_isnumber.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_isnumber.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_isnumber.html#pp_isnumber", "pp_isnumber", 'routine in <a href="./pp_isnumber.html">pp_isnumber.pro</a>', "pp_isnumber.pro", "Paulo Penteado (pp.penteado@gmail.com), Aug/2009  ", "pp_isnumber", "   Tests a string to determine if it can be converted to a floating point number.    All tests are case-insensitive. String must be trimmed on both sides:    if it contains leading or trailing blanks, it is not considered a number.   ", "nan      If set, NaN is allowed as a number.  infinity      If set, Infinity is allowed as a number       (any of inf,infi,infin,infini,infinit,infinity).  trim      If set, blanks on the string (on both sides) are ignored (a call is made       to strtrim).  integer      If set, will test for integer numbers, instead of real numbers.  blank      If set, blanks are allowed as numbers  all      If set and the input is an array, pp_isnumber will return a single 0 or 1,       indicating whether every element in the array passed the test.   istr      String or string array to test.   ", "          -1", " Test some simple cases: <span class= code-output > print,pp_isnumber(['a','12','-1','1.8','.9','-.8e-3','NaN','infinity','a12'])</span> <span class= code-output > ;   0   1   1   1   1   1   1   1   0</span> <span class= code-output > ;print,pp_isnumber(['a','12','-1','1.8','.9','-.8e-3','NaN','infinity','a12'],nan=0,infinity=0)</span> <span class= code-output > ;   0   1   1   1   1   1   0   0   0</span> <span class= code-output > print,pp_isnumber(['a','12','-1','1.8','.9','-.8e-3','NaN','infinity','a12'],/integer)</span> <span class= code-output > ;   0   1   1   0   0   0   0   0   0</span>       True if str is a floating point number, or (optionally), NaN or Infinity.     False otherwise, including if str is undefined or is blank (unless the    keyword blank is set).   ");
  
  

libdata[libdataItem++] = new Array("./pp_itool_save.html", "pp_itool_save.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_itool_save.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_itool_save.html#pp_itool_save", "pp_itool_save", 'routine in <a href="./pp_itool_save.html">pp_itool_save.pro</a>', "pp_itool_save.pro", "Paulo Penteado (pp.penteado@gmail.com), Mar/2009  ", "pp_itool_save", "    Saves an itool to and isv and/or an eps file, optionally closing the itool afterwards.     Some eps options can be chosen (CMYK colorspace and vector/bitmap use).   ", "isvfile      Name of the isv file to make. Is ignored if argument file is provided.  epsfile      Name of the eps file to make. Is ignored if argument file is provided.  iclose      If set, the itool is closed after saving.  cmyk      If set, the eps is saved in CMYK colorspace.  novec      If set, the eps file is made a bitmap, instead of vector.  id      Itool id to use. If not specified, the current is used and its id is returned.   fname      Name of the file to make, to be used for the isv and the eps files.       That is, if name is 'itoolfile', both 'itoolfile.isv' and 'itoolfile.eps' are made.   ", "          -1", "   To make an iplot that does not show up in the screen and is saved and closed automatically:;;     iplot,findgen(10),user_interface='none',/no_saveprompt,/disable_splash     pp_itool_save,'pp_iplotexample',/iclose    ");
  
  

libdata[libdataItem++] = new Array("./pp_ixyouts.html", "pp_ixyouts.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_ixyouts.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_ixyouts.html#pp_ixyouts", "pp_ixyouts", 'routine in <a href="./pp_ixyouts.html">pp_ixyouts.pro</a>', "pp_ixyouts.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2009  ", "pp_ixyouts", "    Similar to xyouts, puts a text into the current itool.   ", "font_size      Font size to use in the text.  vnumber      View number (panel number) in the itool where the text should be placed.  id      Itool id to use. If not specified, the current is used and its id is returned.  _ref_extra      Any other properties of the text to set (IDLitVisText properties).   str      String with the text to put into the itool.  location      Two element array with the x,y coordinates where to place the text, in normalized units       ([0.,0.], is in the middle of the itool).   ", "          -1", "   To make an X axis title with a different font from the tick labels: <span class= code-output > iplot,findgen(10),xtickfont_size=12.</span>  <span class= code-output > pp_ixyouts,'X Axis',[0.0,-0.8],font_size=24.,color=[255,0,0]</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_locate.html", "pp_locate.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_locate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_locate.html#pp_locate", "pp_locate", 'routine in <a href="./pp_locate.html">pp_locate.pro</a>', "pp_locate.pro", "Paulo Penteado (http://www.ppenteado.net), May/2013  ", "pp_locate", "    Locates all the occurrences of all different (unique) values in the input array, similarly     to what would be produced by running a where() on each unique value of array, but this is     much more efficient, since only one pass is done through the array.   ", "histogram      A hash where the keys are the unique values present in array, and the values       are the number of occurrences in array.       unique_values : out, optional       An array containing the unique values present in array.  unique_valuessorted_values      A sorted copy of array.  no_sort      If set, pp_locate assumes array is ordered. By default, pp_locate does       not make this assumption, and will have to compute a sort() on array. If you       know array is sorted, this will save some time. If no_sort is set, but       array is not sorted, the results may be incorrect.  unique_indices      The array of indices into the original array of the unique elements.  sort_indices      The array of indices into array to make it ordered: sort_indices=sort(array).  reverse_sort      An array with indices into the sorted version of array, to map the elements       back into the original order: while sorted_values=array[sort_indices],       sorted_values[reverse_sort]=array.   use_pointerscountsarray      An array of any type that can be sorted (integers, reals, strings, etc).       If array is sorted, the no_sort keyword can be set, to avoid spending time       computing a sort() of array.   ", "          -1", "    Create an array containing several repetitions of a few strings, and locate     all the occurences of each unique string: <span class= code-output > array=['a','j','kk','a','a','b','zrdc','29','b','29','-19','0']</span> <span class= code-output > loc=pp_locate(array,sorted_values=sarray,unique_values=uarray,histogram=h)</span> <span class= code-output > help,loc</span> <span class= code-output > ;LOC             HASH  &lt;ID=140  NELEMENTS=8&gt;</span> <span class= code-output > print,loc</span> <span class= code-output > ;zrdc:                      6</span> <span class= code-output > ;a:                      0                     3                     4</span> <span class= code-output > ;j:                      1</span> <span class= code-output > ;0:                     11</span> <span class= code-output > ;-19:                     10</span> <span class= code-output > ;b:                      5                     8</span> <span class= code-output > ;kk:                      2</span> <span class= code-output > ;29:                      7                     9</span> <span class= code-output > foreach el,uarray do print,el,':',h[el]</span> <span class= code-output > ;-19:                     1</span> <span class= code-output > ;0:           1</span> <span class= code-output > ;29:           2</span> <span class= code-output > ;a:           3</span> <span class= code-output > ;b:           2</span> <span class= code-output > ;j:           1</span> <span class= code-output > ;kk:           1</span> <span class= code-output > ;zrdc:           1</span>      A hash where the keys are the unique values present in array, and the values     are the indices where they occur. See the example below.   ");
  
  

libdata[libdataItem++] = new Array("./pp_longtocolortriple.html", "pp_longtocolortriple.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_longtocolortriple.pro", "Paulo Penteado (http://www.ppenteado.net), Aug/2015  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_longtocolortriple.html#pp_longtocolortriple", "pp_longtocolortriple", 'routine in <a href="./pp_longtocolortriple.html">pp_longtocolortriple.pro</a>', "pp_longtocolortriple.pro", "Paulo Penteado (http://www.ppenteado.net), Aug/2015  ", "pp_longtocolortriple", "    Converts colors from long integers to RGB color triples. Input can be either scalar     or an array. The inverse of this function is     pp_colortripletolong.   ", "icolors      A scalar or array of colors encoded as long integers.   ", "          -1", "   Convert black and white, from long integers to RGB vectors: <span class= code-output > print,pp_longtocolortriple([0L,2L^24-1])</span> <span class= code-output > ;     0           0           0</span> <span class= code-output > ;     255         255         255</span>        An array with RGB color triples, one triple per input element. If input is an array,     output is an array with one extra dimension, of size 3, as the first dimension. If input     is scalar, output is simply a 3-element array.   ");
  
  

libdata[libdataItem++] = new Array("./pp_lorentz_from_fwhm.html", "pp_lorentz_from_fwhm.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_lorentz_from_fwhm.pro", "Paulo Penteado (pp.penteado@gmail.com), Nov/2010  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_lorentz_from_fwhm.html#pp_lorentz_from_fwhm", "pp_lorentz_from_fwhm", 'routine in <a href="./pp_lorentz_from_fwhm.html">pp_lorentz_from_fwhm.pro</a>', "pp_lorentz_from_fwhm.pro", "", "pp_lorentz_from_fwhm", "    Evaluates a normalized Lorentzian distribution of mean zero and the provided     width at the provided locations (x). The width by the FWHM (fwhm).   ", "fwhm      Specifies the width of the Gaussian, as its Full Width Half Maximum (FWHM).   x      The locations where the Gaussian is to be evaluated.   ", "          -1", "   Make a domain where the Lorentzian is to be evaluated: <span class= code-output > nx=201</span> <span class= code-output > x=(dindgen(nx)/(nx-1d0)-0.5d0)*5d0</span>    Make a Lorentzian with fwhm=1 and plot it: <span class= code-output > yl=pp_lorentz_from_fwhm(x,fwhm=1d0)</span> <span class= code-output > pl=plot(x,yl,color='blue',name='Lorentzian, FWHM=1d0',thick=2.)</span>    Now compare with a Gaussian (made with pp_gauss_from_fwhm): <span class= code-output > yg=pp_gauss_from_fwhm(x,fwhm=1d0)</span> <span class= code-output > pg=plot(x,yg,color='red',name='Gaussian, FWHM=1d0',thick=2.,/over)</span> <span class= code-output > l=legend(target=[pg,pl],position=[0.5,0.5]) ;Identify the two lines</span>    Save the result into the file shown below: <span class= code-output >   pl.save,'pp_lorentz_from_fwhm.png',resolution=100</span>        ");
  
  

libdata[libdataItem++] = new Array("./pp_multiplot__define.html", "pp_multiplot__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_multiplot__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2010  ", "", "    pp_multiplot objects hold a grid of plots (from the plot function, of IDL     Graphics, not the plot procedure from direct graphics) with no empty space between lines     and columns, to use a single vertical/horizontal axis for each line/column     of plots. This was inspired by the functionality provided by multiplot from IDLAstro     (http://idlastro.gsfc.nasa.gov/ftp/pro/plot/multiplot.pro)     for direct graphics.      But contrary to multiplot, this system works for Graphics (instead of direct     graphics), allows for lines/columns of different heights/widths,     provides global margins and axes titles, and provides a synchronization     mechanism to keep the plots in the same line/column (or all) with the same     axes ranges and properties. Also, like in pp_plot, there is the option     of suppressing the first/last tick marks of the axes, to avoid their overlap     with the neighboring plots (enabled by default, depending on the plot's     location on the grid).      A pp_multiplot object makes a window to hold the grid, and will contain all the     plots in the grid (made with the plot method provided here). The individual     plot objects can be retrieved (for instance, to set/get their properties),     and axes properties can be set (and synchronized) for entire lines/columns     (or all plots in the grid) at a time. The init/get/set methods pass any     extra properties to the window that contains the plot - the window class is     used here, not inherited.      See the documentation on the public methods     pp_multiplot::init, pp_multiplot::plot, pp_multiplot::image,     pp_multiplot::contour, pp_multiplot::getproperty,     pp_multiplot::setproperty, pp_multiplot::sync_axes, ,pp_multiplot::close,     pp_multiplot::save, and pp_multiplot::getposition, for details on their use.   ", "", "          -1", "20101027       Make a simple 2x2 grid with equal sizes: <span class= code-output > m=pp_multiplot(multi_layout=[2,2],global_xtitle='Test X axis title',global_ytitle='Test Y axis title')</span>     Now populate the grid with plots using plot()'s test data: <span class= code-output > ;Since multi_index was not provided, this will occupy the first free location in the grid:</span> <span class= code-output > p0=m.plot(/test,color='red',thick=2.)</span> <span class= code-output > p1=m.plot(/test,color='blue',linestyle=1) ;Second location, since multi_index was omitted</span> <span class= code-output > p2=m.plot(/test,multi_index=2,symbol='circle') ;Third location, explicitly set with multi_index</span>     The result should look like              Now, the x and y ranges on the second plot will be changed: <span class= code-output > p1.xrange=[50,100]</span> <span class= code-output > p1.yrange=[0,1]</span> <span class= code-output > m.sync_axes,1 ;Update the axes on the plot, taking the second one as reference.</span>     Now the plot will have a different x axis on the second column, and a different     y axis on the first line:       These new ranges will automatically be used when a new plot is put on that     line/column: <span class= code-output > p3=m.plot(/test,multi_index=3) ;Fourth location, explicitly set with multi_index</span>     Now, save the output to a vector pdf, and close the window in the usual Graphics way: <span class= code-output > m.save,'pp_multiplot_ex3.pdf'</span> <span class= code-output > m.close</span>     The file would look like              A more complicated example, with a 2x3 grid with variable widths and heights: <span class= code-output > m=pp_multiplot(multi_layout=[2,3],lineheights=[100,200,100],columnwidths=[100,200],/absolute_dims)</span> <span class= code-output > p0=m.plot(/test,color='red')</span> <span class= code-output > p1=m.plot(/test,color='blue',xrange=[50,100])</span> <span class= code-output > p2=m.plot(/test,color='green',ycolor='magenta',propagate=2) ;Make ycolor extend only to the second line</span> <span class= code-output > p3=m.plot(/test,linestyle='dotted')</span> <span class= code-output > p4=m.plot(/test,symbol='square')</span> <span class= code-output > p5=m.plot(/test,symbol='circle')</span>     Which would look like             Now to retrieve some y properties of each line: <span class= code-output > print,m.yranges</span> <span class= code-output > ;     -0.82532734      0.93990618</span> <span class= code-output > ;     -0.82532734      0.93990618</span> <span class= code-output > ;     -0.82532734      0.93990618</span> <span class= code-output > print,m.ycolor</span> <span class= code-output > ;!NULL</span> <span class= code-output > ;magenta</span> <span class= code-output > ;!NULL</span>     Now to make the second column have red x axes: <span class= code-output > xcolor=m.xcolor</span> <span class= code-output > print,xcolor</span> <span class= code-output > ;!NULL</span> <span class= code-output > ;!NULL</span> <span class= code-output > xcolor[1]='red'</span> <span class= code-output > m.xcolor=xcolor</span>     Now to make all plots have larger y tick marks: <span class= code-output > m.yticklen=0.2</span>     The final result would be             Save this window to a low resolution bitmap (same used in the documentation)     and close it: <span class= code-output > m.save,'pp_multiplot_ex5.png',resolution=100</span> <span class= code-output > m.close</span>     A simple example, with plots made with a set of default properties, so that     it is not necessary to repeat them for each plot: <span class= code-output > props={color:'red',symbol:'square',sym_filled:1}</span> <span class= code-output > m=pp_multiplot(multi_layout=[1,3],graphproperties=props)</span> <span class= code-output > p1=m.plot(/test)</span> <span class= code-output > p2=m.plot(/test)</span> <span class= code-output > p3=m.plot(/test,color='blue')</span>     The result would be             Now, we will change the yrange in one of the panels. This will cause the     axis tick labels to get recalculated, resulting in overlapping labels. This     would happen even if the new yrange was identical to the current range, beacuse     setting the range triggers a recalculation of the ticks: <span class= code-output >  p2.yrange=[-1,2]</span>     Which looks like            The fix to that is a call to the updateranges method: <span class= code-output > m.updateranges</span>     Which will make the plot look like         IDL 8.0   ");
  
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::init", "pp_multiplot::init", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::init", "    Creates an object to hold a grid of plots (from the plot function, of IDL     Graphics, not the plot procedure from direct graphics) with no empty space between lines     and columns, to use a single vertical/horizontal axis for each line/column     of plots. See the description of the class pp_multiplot for details     and examples.   ", "_REF_EXTRA      Any extra properties are just passed to window() (the init method of the       window class). The most common to be used is probably going to be dimensions.       See the help on window() for more information.  multi_layout      The layout of the grid to create, as a 2-element array [ncolumns, nlines],       with the number of columns and the number of lines for the grid.  title      The title for the entire plot (passed on to the window object).  global_xtitle      The common title for all the x axes, so that a same title does not have to       be shown repeatedly below every column.  global_ytitle      The common title for all the y axes, so that a same title does not have to       be shown repeatedly on the left of every line.  global_margin      The margins, in normalized units (range 0 to 1) to be given around the       grid. Provided as a 4-element array, for [left, bottom, right, top] margins.       Defaults to [0.125d0,0.15d0,0.005d0,0.1d0].  columnwidths      If set to an array with the same number of elements as the number of grid       columns, specifies the width to use for each plot column. If not provided,       equal widths are used. The units are arbitrary, as only their relative values       is used, unless absolute_dims is set, in which case the units are the same       as window()'s dimensions.  lineheights      If set to an array with the same number of elements as the number of grid       lines, specifies the height to use for each plot column. If not provided,       equal heights are used. The units are arbitrary, as only their relative values       is used, unless absolute_dims is set, in which case the units are the same       as window()'s dimensions.  absolute_dims      If set, causes columnwidths and lineheights to be interpreted as absolute,       rather than relative values. In that case, their units are the same as those       used by window()'s dimensions.  xgapygapxsupressdivisionysupressdivisiongraphproperties      Use this keyword to provide a set of graphic keywords to be passed to all       individual graphs by default. It should be in the form of a structure, with       each field containing the value for the keyword of corresponding name.       If an individual graph's creation specifies a value for a keyword given in       graphproperties, it will take precendece over the graphproperties value.       See examples above.   xtickratioytickratio", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::plot", "pp_multiplot::plot", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::plot", "    A wrapper for plot(), which creates the plot in the proper place and with     the right properties (particularly x/y ranges) in the multiplot grid, adding     the object to the list of plots contained by the pp_multiplot object.   ", "TEST      Passed on to plot(), to make plot() used the test data instead.  _EXTRA      Any keywords not handled by this method are passed on to plot(). See the       help on plot() for details.        The following properties are axes properties, that can be made common across       columns (x) or lines (y) with the keyword propagate. See the help on plot       objects for details:        [XY]COLOR, [XY]GRIDSTYLE, [XY]LOG, [XY]MAJOR, [XY]MINOR, [XY]SUBTICKLEN, [XY]TEXT_COLOR,       [XY]TEXT_POS, [XY]THICK, [XY]TICKDIR, [XY]TICKFONT_NAME, [XY]TICKFONT_SIZE, [XY]TICKFONT_STYLE,       [XY]TICKFORMAT, [XY]TICKINTERVAL, [XY]TICKLAYOUT, [XY]TICKLEN, [XY]TICKNAME, [XY]TICKUNITS,       [XY]TICKVALUES, [XY]TITLE, [XY]TRANSPARENCY   multi_index      The index of the position to place the plot in the grid. Count starts at       0, on the top left, proceeding left-to-right, then top-to-bottom, up to       nlines*ncolumns-1.  xrange      A 2-element array with the minimum and maximum to use for the x axis. If       not provided, the xrange set for the current column is used, or, if no range       was set for the column, the plot is created with the default range       (determined by plot()), and that range is subsequently set for the column       The other plots in the column have their ranges updated, if necessary.  yrange      A 2-element array with the minimum and maximum to use for the y axis. If       not provided, the xrange set for the current line is used, or, if no range       was set for the line, the plot is created with the default range       (determined by plot()), and that range is subsequently set for the line       The other plots in the line have their ranges updated, if necessary.  propagate      Determines the mode of propagating the axes properties (range and endticks       not included) of this plot. If 0, no propagation of properties is done.       If 1, properties are propagated to all plots in the grid.       If 2, properties are propagated to all plots in the same line/column.  xendticks      The mode set for suppressing the first/last x tick labels of the plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (xendticks=1), except for those that fall on the rightmost       column (xendticks=3).  yendticks      The mode set for suppressing the first/last y tick labels of the plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (yendticks=1), except for those that fall on the top       line (yendticks=3).  arg1      The first argument to be passed on to plot(). See the help on plot()       for details.  arg2      The second argument to be passed on to plot(). See the help on plot()       for details.  arg3      The third argument to be passed on to plot(). See the help on plot()       for details.   ", "          -1", "    The plot object created in the multiplot grid. This is a regular object of     IDL's plot class, and can be manipulated in the usual way. The method     pp_multiplot::sync_axes can be used to synchronize axes properties across     a line/column or all plots, after one plot has been changed (programmatically     or interactively).   ");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::contour", "pp_multiplot::contour", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::contour", "    A wrapper for contour(), which creates the image in the proper place and with     the right properties (particularly x/y ranges) in the multiplot grid, adding     the object to the list of plots contained by the pp_multiplot object.   ", "TEST      Passed on to plot(), to make plot() used the test data instead.  _EXTRA      Any keywords not handled by this method are passed on to plot(). See the       help on plot() for details.        The following properties are axes properties, that can be made common across       columns (x) or lines (y) with the keyword propagate. See the help on plot       objects for details:        [XY]COLOR, [XY]GRIDSTYLE, [XY]LOG, [XY]MAJOR, [XY]MINOR, [XY]SUBTICKLEN, [XY]TEXT_COLOR,       [XY]TEXT_POS, [XY]THICK, [XY]TICKDIR, [XY]TICKFONT_NAME, [XY]TICKFONT_SIZE, [XY]TICKFONT_STYLE,       [XY]TICKFORMAT, [XY]TICKINTERVAL, [XY]TICKLAYOUT, [XY]TICKLEN, [XY]TICKNAME, [XY]TICKUNITS,       [XY]TICKVALUES, [XY]TITLE, [XY]TRANSPARENCY   multi_index      The index of the position to place the plot in the grid. Count starts at       0, on the top left, proceeding left-to-right, then top-to-bottom, up to       nlines*ncolumns-1.  xrange      A 2-element array with the minimum and maximum to use for the x axis. If       not provided, the xrange set for the current column is used, or, if no range       was set for the column, the plot is created with the default range       (determined by plot()), and that range is subsequently set for the column       The other plots in the column have their ranges updated, if necessary.  yrange      A 2-element array with the minimum and maximum to use for the y axis. If       not provided, the xrange set for the current line is used, or, if no range       was set for the line, the plot is created with the default range       (determined by plot()), and that range is subsequently set for the line       The other plots in the line have their ranges updated, if necessary.  propagate      Determines the mode of propagating the axes properties (range and endticks       not included) of this plot. If 0, no propagation of properties is done.       If 1, properties are propagated to all plots in the grid.       If 2, properties are propagated to all plots in the same line/column.  xendticks      The mode set for suppressing the first/last x tick labels of the plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (xendticks=1), except for those that fall on the rightmost       column (xendticks=3).  yendticks      The mode set for suppressing the first/last y tick labels of the plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (yendticks=1), except for those that fall on the top       line (yendticks=3).  arg1      The first argument to be passed on to plot(). See the help on plot()       for details.  arg2      The second argument to be passed on to plot(). See the help on plot()       for details.  arg3      The third argument to be passed on to plot(). See the help on plot()       for details.   ", "          -1", "    The contour object created in the multiplot grid. This is a regular object of     IDL's image class, and can be manipulated in the usual way. The method     pp_multiplot::sync_axes can be used to synchronize axes properties across     a line/column or all plots, after one plot has been changed (programmatically     or interactively).   ");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::image", "pp_multiplot::image", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::image", "    A wrapper for image(), which creates the image in the proper place and with     the right properties (particularly x/y ranges) in the multiplot grid, adding     the object to the list of plots contained by the pp_multiplot object.   ", "TEST      Passed on to plot(), to make plot() used the test data instead.  _EXTRA      Any keywords not handled by this method are passed on to plot(). See the       help on plot() for details.        The following properties are axes properties, that can be made common across       columns (x) or lines (y) with the keyword propagate. See the help on plot       objects for details:        [XY]COLOR, [XY]GRIDSTYLE, [XY]LOG, [XY]MAJOR, [XY]MINOR, [XY]SUBTICKLEN, [XY]TEXT_COLOR,       [XY]TEXT_POS, [XY]THICK, [XY]TICKDIR, [XY]TICKFONT_NAME, [XY]TICKFONT_SIZE, [XY]TICKFONT_STYLE,       [XY]TICKFORMAT, [XY]TICKINTERVAL, [XY]TICKLAYOUT, [XY]TICKLEN, [XY]TICKNAME, [XY]TICKUNITS,       [XY]TICKVALUES, [XY]TITLE, [XY]TRANSPARENCY   multi_index      The index of the position to place the plot in the grid. Count starts at       0, on the top left, proceeding left-to-right, then top-to-bottom, up to       nlines*ncolumns-1.  xrange      A 2-element array with the minimum and maximum to use for the x axis. If       not provided, the xrange set for the current column is used, or, if no range       was set for the column, the plot is created with the default range       (determined by plot()), and that range is subsequently set for the column       The other plots in the column have their ranges updated, if necessary.  yrange      A 2-element array with the minimum and maximum to use for the y axis. If       not provided, the xrange set for the current line is used, or, if no range       was set for the line, the plot is created with the default range       (determined by plot()), and that range is subsequently set for the line       The other plots in the line have their ranges updated, if necessary.  propagate      Determines the mode of propagating the axes properties (range and endticks       not included) of this plot. If 0, no propagation of properties is done.       If 1, properties are propagated to all plots in the grid.       If 2, properties are propagated to all plots in the same line/column.  xendticks      The mode set for suppressing the first/last x tick labels of the plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (xendticks=1), except for those that fall on the rightmost       column (xendticks=3).  yendticks      The mode set for suppressing the first/last y tick labels of the plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (yendticks=1), except for those that fall on the top       line (yendticks=3).  axis_styleaspect_ratioarg1      The first argument to be passed on to plot(). See the help on plot()       for details.  arg2      The second argument to be passed on to plot(). See the help on plot()       for details.  arg3      The third argument to be passed on to plot(). See the help on plot()       for details.   ", "          -1", "    The image object created in the multiplot grid. This is a regular object of     IDL's image class, and can be manipulated in the usual way. The method     pp_multiplot::sync_axes can be used to synchronize axes properties across     a line/column or all plots, after one plot has been changed (programmatically     or interactively).   ");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::do_graphic", "pp_multiplot::do_graphic", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::do_graphic", "    A wrapper for plot(), image() and contour(), which creates the plot in the     proper place and with the right properties (particularly x/y ranges) in the     multiplot grid, adding the object to the list of plots contained by the     pp_multiplot object.   ", "graphic_to_doTEST      Passed on to plot(), to make plot() used the test data instead.  _EXTRA      Any keywords not handled by this method are passed on to plot(). See the       help on plot() for details.        The following properties are axes properties, that can be made common across       columns (x) or lines (y) with the keyword propagate. See the help on plot       objects for details:        [XY]COLOR, [XY]GRIDSTYLE, [XY]LOG, [XY]MAJOR, [XY]MINOR, [XY]SUBTICKLEN, [XY]TEXT_COLOR,       [XY]TEXT_POS, [XY]THICK, [XY]TICKDIR, [XY]TICKFONT_NAME, [XY]TICKFONT_SIZE, [XY]TICKFONT_STYLE,       [XY]TICKFORMAT, [XY]TICKINTERVAL, [XY]TICKLAYOUT, [XY]TICKLEN, [XY]TICKNAME, [XY]TICKUNITS,       [XY]TICKVALUES, [XY]TITLE, [XY]TRANSPARENCY   multi_index      The index of the position to place the plot in the grid. Count starts at       0, on the top left, proceeding left-to-right, then top-to-bottom, up to       nlines*ncolumns-1.  xrange      A 2-element array with the minimum and maximum to use for the x axis. If       not provided, the xrange set for the current column is used, or, if no range       was set for the column, the plot is created with the default range       (determined by plot()), and that range is subsequently set for the column       The other plots in the column have their ranges updated, if necessary.  yrange      A 2-element array with the minimum and maximum to use for the y axis. If       not provided, the xrange set for the current line is used, or, if no range       was set for the line, the plot is created with the default range       (determined by plot()), and that range is subsequently set for the line       The other plots in the line have their ranges updated, if necessary.  propagate      Determines the mode of propagating the axes properties (range and endticks       not included) of this plot. If 0, no propagation of properties is done.       If 1, properties are propagated to all plots in the grid.       If 2, properties are propagated to all plots in the same line/column.  xendticks      The mode set for suppressing the first/last x tick labels of the plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (xendticks=1), except for those that fall on the rightmost       column (xendticks=3).  yendticks      The mode set for suppressing the first/last y tick labels of the plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (yendticks=1), except for those that fall on the top       line (yendticks=3).  arg1      The first argument to be passed on to plot(). See the help on plot()       for details.  arg2      The second argument to be passed on to plot(). See the help on plot()       for details.  arg3      The third argument to be passed on to plot(). See the help on plot()       for details.   ", "          -1", "    The plot object created in the multiplot grid. This is a regular object of     IDL's plot class, and can be manipulated in the usual way. The method     pp_multiplot::sync_axes can be used to synchronize axes properties across     a line/column or all plots, after one plot has been changed (programmatically     or interactively).   ");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::getposition", "pp_multiplot::getposition", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::getposition", "    Calculates the position parameters for a plot in the grid, given its index,     and the parameters set in the fields of self. For use of plot objects, use     pp_multiplot::plot directly, which already uses this method to compute the     location in the grid. This method can be useful if one wants to add another     type of Graphic (not a plot object) into the grid, such as an image or a contour.   ", "bottom      Indicates whether this plot is in the bottom line of the grid.  left      Indicates whether this plot is in the left column of the grid.  top      Indicates whether this plot is in the top line of the grid.  right      Indicates whether this plot is in the right column of the grid.  column      The column where this plot lies on the grid (starting from 0).  line      The line where this plot lies on the grid (starting from 0).   mindex      The grid index of the plot being created, from 0 to ncolumns*nlines-1.   ", "          -1", "    The position array to be passed on to plot, to create this plot on the proper     place in the multiplot window. Contains [x0,y0,x1,y1], where the first two     refer to the lower-left corner, and the last two refer to the top-right corner,     with x counting from the left, and y counting from the bottom.  ");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::getproperty", "pp_multiplot::getproperty", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::getproperty", "    Retrieves properties from pp_multiplot objects. Since pp_multiplot inherits     from IDL_Object, these properties can be accessed with the dot (.) operator.     The extra properties not handled here are passed on to the getproperty method     of the window object (which contains the plots).   ", "_ref_extra      Any keywords not handled by this method are passed on to the getproperty       method of the window object. See the help on window objects for details.        The following properties are axes properties, that can be made common across       columns (x) or lines (y). They are from the plot objects, and are returned       as a list, with one element for each column (x) or line (y). See the help       on plot objects for details:        [XY]COLOR, [XY]GRIDSTYLE, [XY]LOG, [XY]MAJOR, [XY]MINOR, [XY]SUBTICKLEN, [XY]TEXT_COLOR,       [XY]TEXT_POS, [XY]THICK, [XY]TICKDIR, [XY]TICKFONT_NAME, [XY]TICKFONT_SIZE, [XY]TICKFONT_STYLE,       [XY]TICKFORMAT, [XY]TICKINTERVAL, [XY]TICKLAYOUT, [XY]TICKLEN, [XY]TICKNAME, [XY]TICKUNITS,       [XY]TICKVALUES, [XY]TITLE, [XY]TRANSPARENCY   multi_layout      The layout of the grid, as a 2-element array with the number of       columns and the number of lines for the grid.  global_xtitle      The common title for all the x axes.  global_ytitle      The common title for all the y axes.  global_margin      The margins, in normalized units (range 0 to 1) around the grid. Returned       as a 4-element array, for [left, bottom, right, top] margins.  window      The window object, which contains the plots.  title      The title for the entire plot (which resides in the window object).  xranges      A list, with one element for each column, each being a 2-element array       with the minimum and maximum of the x axes for the plots on each column.  yranges      A list, with one element for each line, each being a 2-element array       with the minimum and maximum of the y axes for the plots on each line.  xproperties      A list, with one element for each column, each being a hash with the x       axes' properties that have been set for the plots on each column. On columns       with no properties set, the hash is empty.  yproperties      A list, with one element for each line, each being a hash with the y       axes' properties that have been set for the plots on each line. On lines       with no properties set, the hash is empty.  xendticks      A list, with one element for each column, each being the mode set for       suppressing the first/last x tick labels of the corresponding plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (xendticks=1), except for those that fall on the rightmost       column (xendticks=3).  yendticks      A list, with one element for each column, each being the mode set for       suppressing the first/last y tick labels of the corresponding plot: 0       means that both the first and last labels are suppressed, 1 means that only       the last label is suppressed, 2 means that only the first label is suppressed,       and 3 means that neither is suppressed. The default for each plot depends       on its location on the multiplot grid (its mindex): Plots have their last       label suppressed (yendticks=1), except for those that fall on the top       line (yendticks=3).  xgapygap", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::setproperty", "pp_multiplot::setproperty", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::setproperty", "    Sets properties for pp_multiplot objects. Since pp_multiplot inherits     from IDL_Object, these properties can be accessed with the dot (.) operator.     The extra properties not handled here are passed on to the setproperty method     of the window object (which contains the plots).   ", "_extra      Any keywords not handled by this method are passed on to the getproperty       method of the window object. See the help on window objects for details.        The following properties are axes properties, that can be made common across       columns (x) or lines (y). They are for the plot objects, and are set       as either a list, with one element for each column (x) or line (y), or a       single property, to be replicated for all plots in the column/line. See       the help on plot objects for details:        [XY]COLOR, [XY]GRIDSTYLE, [XY]LOG, [XY]MAJOR, [XY]MINOR, [XY]SUBTICKLEN, [XY]TEXT_COLOR,       [XY]TEXT_POS, [XY]THICK, [XY]TICKDIR, [XY]TICKFONT_NAME, [XY]TICKFONT_SIZE, [XY]TICKFONT_STYLE,       [XY]TICKFORMAT, [XY]TICKINTERVAL, [XY]TICKLAYOUT, [XY]TICKLEN, [XY]TICKNAME, [XY]TICKUNITS,       [XY]TICKVALUES, [XY]TITLE, [XY]TRANSPARENCY   global_xtitle      The common title for all the x axes.  global_ytitle      The common title for all the y axes.  title      The title for the entire plot (which resides in the window object).  xranges      The minimum and maximum of the x axes for the plots on each column. Provided       as either a list, with one element for each column, each being a 2-element       array, or a 2-element array, to be applied for all columns, or as a [2,ncolumns]       array, with the minimum and maximum for each column.  yranges      The minimum and maximum of the y axes for the plots on each line. Provided       as either a list, with one element for each line, each being a 2-element       array, or a 2-element array, to be applied for all lines, or as a [2,nlines]       array, with the minimum and maximum for each line.  xproperties      The x axes' properties that are set for the plots on each column. Provided       as either a list, with one element for each column, each being a hash with       the properties/values as keys/values, or a single hash, to be applied for       all columns.  yproperties      The y axes' properties that are set for the plots on each line. Provided       as either a list, with one element for each line, each being a hash with       the properties/values as keys/values, or a single hash, to be applied for       all lines.  xendticks     The modes for suppressing the first/last x tick labels of the corresponding      plots: 0 means that both the first and last labels are suppressed, 1 means      that only the last label is suppressed, 2 means that only the first label      is suppressed, and 3 means that neither is suppressed. Provided as either      a nlines*ncolumns array, with one element for each plot, or as a scalar, to      be applied the same for all plots.  yendticks     The modes for suppressing the first/last y tick labels of the corresponding      plots: 0 means that both the first and last labels are suppressed, 1 means      that only the last label is suppressed, 2 means that only the first label      is suppressed, and 3 means that neither is suppressed. Provided as either      a nlines*ncolumns array, with one element for each plot, or as a scalar, to      be applied the same for all plots.  xgapygap", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::sync_axes", "pp_multiplot::sync_axes", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::sync_axes", "    Synchronizes the axes, across a line and column, or over the whole grid,     so that they have the same x/y ranges, and, optionally, the same set     x/y axes properties.   ", "layout      If set, not only the ranges are synchronized, but also the x/y axes layouts,       from those properties that have been set (in xproperties and xyproperties).  all      If set, synchronization is carried out on all plots in the grid, instead of       only to those at the same line and same column as the plot used as reference.   mindex      If provided, uses the plot at position mindex (count starts from 0) as the       reference for the axes. If not provided, the currently selected plot is used.       If the index is not provided and none are selected, the first valid plot       is used.   ", "          -1", "    See the documentation on the method pp_multiplot::plot for examples.   ");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::decideintervals", "pp_multiplot::decideintervals", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::decideintervals", "", "decidenewrangedminornewdticksdprangedticksdint", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::updateranges", "pp_multiplot::updateranges", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::updateranges", "    This method should be called after one or more plots in the multiplot had     its axes changed in a way that caused its ticks to be recomputed (setting the     range, for instance), so that the end ticks get fixed.   ", "xy", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::close", "pp_multiplot::close", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot::close", "    Simple wrapper for window::close, to make pp_multiplot objects     look almost like they inherited the window class they use. For more details,     see the help on the close method of IDL's Graphics.  ", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot::save", "pp_multiplot::save", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "Paulo Penteado (pp.penteado@gmail.com), 2010  ", "pp_multiplot::save", "    Simple wrapper for window::save, to make pp_multiplot objects     look almost like they inherited the window class they use. For more details,     see the help on the save method of IDL's Graphics.   ", "_REF_EXTRA      Any keywords are passed on, unaltered, to window::save. See the       help on the window::save for details.   filename      Passed on to window::save, the name for the file to create. Its extension       determines the type of file to be produced. See the help window::save for       more details.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_multiplot__define.html#pp_multiplot__define", "pp_multiplot__define", 'routine in <a href="./pp_multiplot__define.html">pp_multiplot__define.pro</a>', "pp_multiplot__define.pro", "", "pp_multiplot__define", "    Class definition for pp_multiplot.  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_mysqlquery.html", "pp_mysqlquery.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_mysqlquery.pro", "Paulo Penteado (http://www.ppenteado.net), Apr/2015  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_mysqlquery.html#pp_mysqlquery", "pp_mysqlquery", 'routine in <a href="./pp_mysqlquery.html">pp_mysqlquery.pro</a>', "pp_mysqlquery.pro", "Paulo Penteado (http://www.ppenteado.net), Apr 2015  ", "pp_mysqlquery", "    Retrieves a table from a mysql server, into an IDL array of structures.     Each element of the array corresponds to a row in the table. The field names are     the table column names.     The mysql server connection must have been already opened into a logical unit,     using Marc Buie's openmysql     (http://www.boulder.swri.edu/~buie/idl/pro/openmysql.html).   ", "verbose      If set, the mysql commands get printed to the terminal.  ngoodtrimunderscore      If set, column names ending with a _ have the _ removed. Useful to retrieve       data from tables created by pp_structtomysql, which appends an _ to the column       names.  trim      If provided, is passed along to strtrim, which is applied to the string columns.   lun      The logical unit where a connection to mysql was opened with openmysql       (http://www.boulder.swri.edu/~buie/idl/pro/openmysql.html).  query      The query to be performed.   ", "          -1", "   Create a table in a mysql server (server parameters set in ~/.my.conf), then retrieve    the data from it. In this case, assuming that there is a database named pp_structtomysql,    and that the user has write access to it: <span class= code-output > outstruct=replicate({a:1,b:2d0,c:'def'},4)</span> <span class= code-output > outstruct.a=indgen(4)</span> <span class= code-output > outstruct.b=dindgen(4)^2</span> <span class= code-output > outstruct.c+='_'+strtrim(indgen(4),2)</span> <span class= code-output > print,outstruct</span> <span class= code-output > ;{       0       0.0000000 def_0}</span> <span class= code-output > ;{       1       1.0000000 def_1}</span> <span class= code-output > ;{       2       4.0000000 def_2}</span> <span class= code-output > ;{       3       9.0000000 def_3}</span> <span class= code-output > pp_structtomysql,outstruct,'pp_structtomysql_example',primary_key='c_',dbname='pp_structtomysql'</span> <span class= code-output > openmysql,lun,'pp_structtomysql'</span> <span class= code-output > instruct=pp_mysqlquery(lun,'select * from pp_structtomysql_example;')</span> <span class= code-output > print,instruct</span> <span class= code-output > ;{                     0                     0 def_0}</span> <span class= code-output > ;{                     1                     1 def_1}</span> <span class= code-output > ;{                     2                     4 def_2}</span> <span class= code-output > ;{                     3                     9 def_3}</span> <span class= code-output > free_lun,lun</span>    Note that in this example field b was converted to integers upon reading, because all numbers    were integers.   mysqlcmd, from Marc Buie's library  (http://www.boulder.swri.edu/~buie/idl/).       An array of structures, where each element of the array corresponds to a row     in the table. The field names are the table column names.   ");
  
  

libdata[libdataItem++] = new Array("./pp_ocircle.html", "pp_ocircle.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_ocircle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_ocircle.html#pp_ocircle", "pp_ocircle", 'routine in <a href="./pp_ocircle.html">pp_ocircle.pro</a>', "pp_ocircle.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2009  ", "pp_ocircle", "    Returns a filled/open/dotted circle object to use as a symbol in an itool. Object     is an IDLgrPolygon. If the object is edited even after the call to the itool,     the itool symbol will change (it may take clicking on the itool window to cause it to refresh).   ", "np      The number of points used in making the circle (defaults to 21), since it is       actually a polygon (similar to IDL's orb, which is a polyhedron  sphere ).   _ref_extra      Passed to IDLgrPolygon init routine. Commonly useful keywords are:          style: determines the type of circle (2 for filled, 1 for the contour only,         0 for points at the vertices only.          thick: determines the thickness of the line to draw the contour.          color: 3 element RGB color vector.   sz      Symbol size.   ", "          -1", "    To create a plot using filled red circles of size 5: <span class= code-output > oc=pp_ocircle(5.0,color=[255,0,0])</span> <span class= code-output > iplot,indgen(10),sym_object=oc</span>     To change the color, style and thickness of the symbols in the existing plot: <span class= code-output > oc-&gt;setproperty,color=[0,0,255],style=1,thick=1.5</span>     The object will keep exisiting even after the itool is closed. To get     rid of it, it has to be destroyed afterwards (if destroyed while the itool     still exists, it will cause a lot of errors): <span class= code-output > obj_destroy,oc</span>  ");
  
  

libdata[libdataItem++] = new Array("./pp_osquare.html", "pp_osquare.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_osquare.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_osquare.html#pp_osquare", "pp_osquare", 'routine in <a href="./pp_osquare.html">pp_osquare.pro</a>', "pp_osquare.pro", "Paulo Penteado (pp.penteado@gmail.com), Sep/2009  ", "pp_osquare", "    Returns a filled/open/dotted square object to use as a symbol in an itool. Object     is an IDLgrPolygon. If the object is edited even after the call to the itool,     the itool symbol will change (it may take clicking on the itool window to cause it to refresh).   ", "_ref_extra      Passed to IDLgrPolygon init routine. Commonly useful keywords are:          style: determines the type of circle (2 for filled, 1 for the contour only,         0 for points at the vertices only.          thick: determines the thickness of the line to draw the contour.          color: 3 element RGB color vector.   sz      Symbol size.   ", "          -1", "    To create a plot using filled red squares of size 5: <span class= code-output > os=pp_osquare(5.0,color=[255,0,0])</span> <span class= code-output > iplot,indgen(10),sym_object=os</span>     To change the color and thickness of the symbols in the existing plot: <span class= code-output > os-&gt;setproperty,color=[0,0,255],style=1,thick=1.5</span>     The object will keep exisiting even after the itool is closed. To get     rid of it, it has to be destroyed afterwards (if destroyed while the itool     still exists, it will cause a lot of errors): <span class= code-output > obj_destroy,os</span>  ");
  
  

libdata[libdataItem++] = new Array("./pp_parsetext.html", "pp_parsetext.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_parsetext.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_parsetext.html#pp_parsetext", "pp_parsetext", 'routine in <a href="./pp_parsetext.html">pp_parsetext.pro</a>', "pp_parsetext.pro", "Paulo Penteado (http://www.ppenteado.net), Mar/2015   ", "pp_parsetext", "    Parses table data in a text file (or text array) as an array, with multiple options to specify different     file formats and processing to be applied to the file. The output can be a string array or an     array of structures.   ", "header      The header line(s) from the text file, unparsed. The number of header lines       is set by nheader.  lines      A string array, with one element per line in the input file.  splitlines      A list where each element is a string array corresponding to one line of the       input file. Each element in the array is one column from that file line.  as_struct      If set, the output is an array of structures, one structure per input line.  fieldnames      The names for the structure fields returned when as_struct is set.       If this is not given, field names are taken from the last line of the file header  types      A hash containing type specifications for each of the structure fields to be created       when as_struct is set. If not given, it will be determined by guessing from the       file's column contents.  trim      Determines the type of leading/trailing trimming to be applied to the file lines. It is       passed to strtrim, which is applied to all file lines.  spacedelimited      If set, the columns are assumed to be separated by any positive number of blank       spaces. If not set, the columns are assumed to be fixed length, equal to the       lengths used in the header line.  skipblank      If set, blank lines in the file are skipped.  delimiter      The character(s) used as column delimiter in the file (the columns are split       with strplit). If not given, the input columns are assumed to be separated by blank space.  stripquotes      If set, table elements enclosed in quotes will have the quotes removed.  isinteger      If provided, will return a list, with one element per column of the file. Each element       is an array that informs whether the corresponding column element in the input is an integer.       Most often used for debugging and finding anomalous values in the input.  isfloat      If provided, will return a list, with one element per column of the file. Each element       is an array that informs whether the corresponding column element in the input is a float.       Most often used for debugging and finding anomalous values in the input.  missingint      If provided, any missing values in columns with integers will be filled with this value.  missingfloat      If provided, any missing values in columns with floats will be filled with this value.  blank      Passed to pp_isnumber. If set, blank strings are considered valid numbers.  buffer      If set, the first argument (file) is taken as a string array of the file contents,       instead of a file name to be read.  nheader      The number of header lines contained in the file. If as_struct is set and       field names are not provided, the last line on the header is used to determine       column names.   file    A string with the file name to read. If buffer is set, this should be a string     array, where each element correponds to what would be a file line.   ", "          -1", "    Read some example files provided with IDL, as structures: <span class= code-output > file=filepath('ascii.txt',subdirectory=['examples','data'])</span> <span class= code-output > a=pp_parsetext(file,/skipblank,nheader=4,header=header,delimiter=',',$</span> <span class= code-output > /as_struct,fieldnames=['lon','lat','el','temp','dew','speed','dir'])</span> <span class= code-output > help,a</span> <span class= code-output > ;A               STRUCT    = -&gt; &lt;Anonymous&gt; Array[15]</span> <span class= code-output > ;help,a[0]</span> <span class= code-output > ;** Structure &lt;4023e918&gt;, 7 tags, length=56, data length=56, refs=2:</span> <span class= code-output > ;LON             DOUBLE          -156.95000</span> <span class= code-output > ;LAT             DOUBLE           20.783300</span> <span class= code-output > ;EL              LONG64                       399</span> <span class= code-output > ;TEMP            LONG64                        68</span> <span class= code-output > ;DEW             LONG64                        64</span> <span class= code-output > ;SPEED           LONG64                        10</span> <span class= code-output > ;DIR             LONG64                        60</span> <span class= code-output > print,header</span> <span class= code-output > ;This file contains ASCII format weather data in a comma delimited table with comments prefaced by the  %  character. The columns represent:</span> <span class= code-output > ;Longitude, latitude, elevation (in feet), temperature (in degrees F),  dew point (in degrees  F), wind speed (knots), wind direction (degrees)</span>  pp_isnumber, pp_readtxt      Expand documentation, with more examples. This function has received many options    to be capable of parsing different kinds of text files I encounter, which means    its options make for a large variety of possibilities in file formats.   ");
  
  

libdata[libdataItem++] = new Array("./pp_plot.html", "pp_plot.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_plot.pro", "Paulo Penteado (pp.penteado@gmail.com), May/2010  ", "", "", "", "          -1", "20110722  Improved on algorithm to decide on tick locations (created  pp_plot_decideintervals). Jul/2011  ");
  
  
  libdata[libdataItem++] = new Array("./pp_plot.html#pp_plot_decideintervals", "pp_plot_decideintervals", 'routine in <a href="./pp_plot.html">pp_plot.pro</a>', "pp_plot.pro", "", "pp_plot_decideintervals", "", "decidenewrangedminornewdticksdprangedticksdint", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_plot.html#pp_plot", "pp_plot", 'routine in <a href="./pp_plot.html">pp_plot.pro</a>', "pp_plot.pro", "Paulo Penteado (pp.penteado@gmail.com), May/2010   ", "pp_plot", "    Wrapper to IDL's plot procedure, to allow supressing the first and/or last tick values, so     that they do not overlap with neighbouring plots (particularly if using multiplot_pp).   ", "xendticks      Its value determines the kind of supression of the end ticks for the x axis:        0 - No end ticks are printed (both the first and last are supressed).        1 - Only the last is supressed, the first tick is left untouched.        2 - Only the first is supressed, the last tick is left untouched.        3  - No supression, this routine just passes its arguments to plot, with no changes.  yendticks      Its value determines the kind of supression of the end ticks for the y axis:        0 - No end ticks are printed (both the first and last are supressed).        1 - Only the last is supressed, the first tick is left untouched.        2 - Only the first is supressed, the last tick is left untouched.        3  - No supression, this routine just passes its arguments to plot, with no changes.  _extra      Any other keywords are just passed to plot, unaltered.  xrange      Passed to IDL's plot, see its help.  xtickv      Passed to IDL's plot, see its help.  xticks      Passed to IDL's plot, see its help.  xtickinterval      Passed to IDL's plot, see its help.  xstyle      Passed to IDL's plot, see its help.  xtick_get      Passed to IDL's plot, see its help.  xminoryrange      Passed to IDL's plot, see its help.  ytickv      Passed to IDL's plot, see its help.  yticks      Passed to IDL's plot, see its help.  ytickinterval      Passed to IDL's plot, see its help.  ystyle      Passed to IDL's plot, see its help.  ytick_get      Passed to IDL's plot, see its help.   yminoruse_multiplot      If set, xendticks and yendticks are determined by the plot's position       in the grid set by multiplot_pp: Plots not on the top row get the top       y tick suppressed (yendticks=1), plots not on the right column get the right       x tick suppressed (xendticks=1).  calculate_ticks      If set and tick values are not provided, the tick values are defined here,       instead of letting IDL's plot do it. Useful to keep plots with ticks suppressed       (in which case auto tick locations are calculated here) consistent with those       made with no suppresion (which otherwise would have their ticks determined by IDL's       plot).  x      Passed to IDL's plot, see its help. Used to determine the x range if xrange is not provided (or the       y range if y is not provided).  y      Passed to IDL's plot, see its help. Used to determine the y range if yrange is not provided.   ", "          -1", "    Added the keywords use_multiplot and calculate_ticks. Apr/2011.     To make a plot supressing both end marks on x, but supress only the bottom mark on y: <span class= code-output > pp_plot,dindgen(10),dindgen(10)*2,xendticks=0,yendticks=2,xstyle=1,ystyle=1,xticks=5,xminor=4</span> <span class= code-output > ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span> <span class= code-output > ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span>    To make multiplots (using multiplot_pp, a variation of IDLastro's multiplot) where the end marks do not overlap: <span class= code-output >  multiplot_pp,[2,2]</span> <span class= code-output >  pp_plot,[0,1],[0,1],xstyle=1,ystyle=1,/use_multiplot,/calculate_ticks</span> <span class= code-output >  ;pp_plot: setting xendticks to 1 and yendticks to 3</span> <span class= code-output >  ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span> <span class= code-output >  ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span> <span class= code-output >  multiplot_pp</span> <span class= code-output >  pp_plot,[0,1],[0,1],xstyle=1,ystyle=1,/use_multiplot,/calculate_ticks</span> <span class= code-output >  ;pp_plot: setting xendticks to 3 and yendticks to 3</span> <span class= code-output >  ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span> <span class= code-output >  ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span> <span class= code-output >  multiplot_pp</span> <span class= code-output >  pp_plot,[0,1],[0,1],xstyle=1,ystyle=1,/use_multiplot,/calculate_ticks</span> <span class= code-output >  ;pp_plot: setting xendticks to 1 and yendticks to 1</span> <span class= code-output >  ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span> <span class= code-output >  ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span> <span class= code-output >  multiplot_pp</span> <span class= code-output >  pp_plot,[0,1],[0,1],xstyle=1,ystyle=1,/use_multiplot,/calculate_ticks</span> <span class= code-output >  ;pp_plot: setting xendticks to 3 and yendticks to 1</span> <span class= code-output >  ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span> <span class= code-output >  ;pp_plot: setting tick locations (with pp_plot_maketicks), instead of using plot's default</span>   ");
  
  

libdata[libdataItem++] = new Array("./pp_quartile.html", "pp_quartile.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_quartile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_quartile.html#pp_quartile", "pp_quartile", 'routine in <a href="./pp_quartile.html">pp_quartile.pro</a>', "pp_quartile.pro", "Paulo Penteado (http://www.ppenteado.net ), Jan/2016  ", "pp_quartile", "    Given an array iarr, returns the value(s) in the array that correspond to     the given quartile(s). If cut is set, instead of the quartile values, returns      a copy of the array, with minimum and maximum values given by the two quartiles provided.   ", "cut      If set, quart must be a two-element array. Instead of returning quartile       values, the function will return a copy of the array, with all values below the       low quartile (the first element in quart) will be set to the array's value       at that quartile, and all values above the high quartile (the second element       in quart) will be set to the value of the high quartile.  nan      If the array contains non-finite values (NaN or Infinity), this must be set       so that the quartiles are correctly calculated. By default, it is set. Setting       nan to zero saves time, but if the array contains non-finite values and nan       is zero, incorrect results may be returned.  index      An array with the index in s corresponding to the quartiles selected. Useful       to obtain indices in iarr that match some quartile level. See example   sort      An array with the indices to sort the input array: s=sort(iarr)  iarr      The array for which the quartile(s) will be calculated.  quart      The desired quartile(s). It can be a scalar or an array.   ", "          -1", "   Create an array with 10 values between 0 and 9 and check on some of its quartiles: <span class= code-output > a=reverse(dindgen(10))</span> <span class= code-output > print,pp_quartile(a,[0.2d0,0.8d0])</span> <span class= code-output > ;       2.0000000       8.0000000</span> <span class= code-output > print,pp_quartile(a,[0.2d0,0.8d0],/cut)</span> <span class= code-output > ;       8.0000000       8.0000000       7.0000000       6.0000000       5.0000000</span> <span class= code-output > ;       4.0000000       3.0000000       2.0000000       2.0000000       2.0000000</span>  <span class= code-output >Obtain the elements of a which are below the 50% quartile:</span> <span class= code-output > a_50=pp_quartile(a,0.5d0,index=ind,sort=s)</span> <span class= code-output > print,a[s[0:ind]]</span> <span class= code-output > ;       0.0000000       1.0000000       2.0000000       3.0000000       4.0000000       5.0000000</span>  ");
  
  

libdata[libdataItem++] = new Array("./pp_readfits__define.html", "pp_readfits__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_readfits__define.pro", "Paulo Penteado (pp.penteado@gmail.com), Dec/2010   ", "", "", "", "          -1", "   Several routines from the idlastro library.  ");
  
  
  libdata[libdataItem++] = new Array("./pp_readfits__define.html#pp_readfits::init", "pp_readfits::init", 'routine in <a href="./pp_readfits__define.html">pp_readfits__define.pro</a>', "pp_readfits__define.pro", "", "pp_readfits::init", "", "file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_readfits__define.html#pp_readfits::getproperty", "pp_readfits::getproperty", 'routine in <a href="./pp_readfits__define.html">pp_readfits__define.pro</a>', "pp_readfits__define.pro", "", "pp_readfits::getproperty", "", "filedataheadervariablesdescriptions", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_readfits__define.html#pp_readfits::_overloadBracketsRightSide", "pp_readfits::_overloadBracketsRightSide", 'routine in <a href="./pp_readfits__define.html">pp_readfits__define.pro</a>', "pp_readfits__define.pro", "", "pp_readfits::_overloadBracketsRightSide", "", "isRangesub1sub2sub3sub4sub5sub6sub7sub8", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_readfits__define.html#pp_readfits__define", "pp_readfits__define", 'routine in <a href="./pp_readfits__define.html">pp_readfits__define.pro</a>', "pp_readfits__define.pro", "", "pp_readfits__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_readncdfs.html", "pp_readncdfs.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_readncdfs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_readncdfs.html#pp_readncdfs", "pp_readncdfs", 'routine in <a href="./pp_readncdfs.html">pp_readncdfs.pro</a>', "pp_readncdfs.pro", "Paulo Penteado (http://www.ppenteado.net), 2006  ", "pp_readncdfs", "    Reads the dimensions and variables from a netcdf file into a structure or hash.   ", "long      If set, the output contains an extra field, identifying the names of the dimensions       of each variable.   verb hash      If set, returns a hash instead of a structure.   ncf      The name of the netCDF file to read.   ", "          -1", "   Read one of IDL's example files: <span class= code-output > fp=filepath('sample.nc',subdirectory=['examples','data'])</span> <span class= code-output > fc=pp_readncdfs(fp)</span> <span class= code-output > ;help,fc</span> <span class= code-output > Structure &lt;c88e1778&gt;, 3 tags, length=393240, data length=393238, refs=1:</span> <span class= code-output > ;NCDFNAME        STRING    '/usr/local/exelis/idl84/examples/data/sample.nc'</span> <span class= code-output > ;D               STRUCT    -&gt; &lt;Anonymous&gt; Array[1]</span> <span class= code-output > ;V               STRUCT    -&gt; &lt;Anonymous&gt; Array[1]</span> <span class= code-output > help,fc.d</span> <span class= code-output > ;** Structure &lt;c8192c18&gt;, 3 tags, length=6, data length=6, refs=2:</span> <span class= code-output > ;X               INT            512</span> <span class= code-output > ;Y               INT            768</span> <span class= code-output > ;Z               INT              0</span> <span class= code-output > help,fc.v</span> <span class= code-output > ;** Structure &lt;c8164ee8&gt;, 1 tags, length=393216, data length=393216, refs=2:</span> <span class= code-output > ;IMAGE           BYTE      Array[768, 512]</span>     Process attributes.   ");
  
  

libdata[libdataItem++] = new Array("./pp_readpars.html", "pp_readpars.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_readpars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_readpars.html#pp_readpars", "pp_readpars", 'routine in <a href="./pp_readpars.html">pp_readpars.pro</a>', "pp_readpars.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2011  ", "pp_readpars", "    Parses a text file or a string array into a hash. The text is interpreted     as lines containing key=value pairs, and can contain comments. Values can     can be converted to integers or reals, if possible.     Values are returned as a (possibly empty) hash, where all keys are strings.      The complement to this function is pp_writepars.   ", "numbers      Sets the type of conversion for values which are numbers, if any. If set to       zero, no conversion is made (all values are returned as strings). If set to       1, values which are integers are returned as long64s, and values which are reals       are returned as doubles.  key_case      If set to 1, keys are converted to all uppercase. If set to 2, keys are converted       to all lowcase.  nan      Passed on to pp_isnumber. If set, NaNs (in several spellings) are accepted       when testing if a value is a real number.  infinity      Passed on to pp_isnumber. If set, infinities (in several spellings) are accepted       when testing if a value is a real number.  input_is_strings      If set, input is treated as a string array, where each element is a line       to parse. Otherwise, input is treated as the name of a text file to read       and parse.  comment_marker      The character to use to mark comments in the text to process. Anything in       a line following this marker is ingored (even if it is escaped or inside       quotes). If something different from deafult is given, it must be a valid       regular expression (that is, especial regex characters must be escaped).  value_separator      The character to use to separate keys from values. If anyhting other than       default is used, it should be kept in mind that this is the separator given       to strsplit. Thus it follows strsplit's rules.  comment_lines      Provides a string array with all lines that were not put into the hash (comment       lines, or lines that were not recognized as containing a valid key=value).   input      If input_is_strings is not set, this is a string with the name of a text       file to read and parse. Otherwise, it is a string array, interpreted in the       same way a file would be (each element corresponding to one file line).   ", "          -1", " Make up some content to read, in the form of a string array: <span class= code-output > example_string=['#some comments','a=1 #some other comments',' b = -9', c = 'some string' #some more comments ,'d=98.765d-6 #in some units']</span> <span class= code-output > foreach el,example_string do print,el</span> <span class= code-output > ;#some comments</span> <span class= code-output > ;a=1 #some other comments</span> <span class= code-output > ; b = -9</span> <span class= code-output > ;c = 'some string' #some more comments</span> <span class= code-output > ;d=98.765d-6 #in some units</span>  Now parse it and chek the results: <span class= code-output > pars=pp_readpars(example_string,/input_is_string)</span> <span class= code-output > print,pars</span> <span class= code-output > ;c: 'some string'</span> <span class= code-output > ;a:                      1</span> <span class= code-output > ;b:                     -9</span> <span class= code-output > ;d:    9.8765000e-05</span> <span class= code-output > foreach el,pars do help,el</span> <span class= code-output > ;EL              STRING    = ''some string''</span> <span class= code-output > ;EL              LONG64    =                      1</span> <span class= code-output > ;EL              LONG64    =                     -9</span> <span class= code-output > ;EL              DOUBLE    =    9.8765000e-05</span>     Support values as arrays. For now, the value array would be returned as    a string, which could be parsed afterwards.    Support returning comments from the same lines as values. For now, comments    following values are discarded (comments in standalone lines, and lines not    recognized are valid key=value, can be retrieved with comment_lines).   pp_isnumber   ");
  
  

libdata[libdataItem++] = new Array("./pp_readtxt.html", "pp_readtxt.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_readtxt.pro", "Paulo Penteado (http://www.ppenteado.net), Feb/2014  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_readtxt.html#pp_readtxt", "pp_readtxt", 'routine in <a href="./pp_readtxt.html">pp_readtxt.pro</a>', "pp_readtxt.pro", "Paulo Penteado (http://www.ppenteado.net),  ", "pp_readtxt", "    Reads a text file into a string array. Each line of the text file becomes     one element of the string array.   ", "file      A string with the name of the file to read.  count      Returns the number of lines read from the file   ", "          -1", "   Read the example file ascii.txt included with IDL: <span class= code-output > fp=filepath('ascii.txt',subdir=['examples','data'])</span> <span class= code-output > contents=pp_readtxt(fp)</span> <span class= code-output > help,contents</span> <span class= code-output > ;CONTENTS        STRING    = Array[20]</span> <span class= code-output > print,contents[0:3],format='(A)'</span> <span class= code-output > ; This file contains ASCII format weather data in a comma delimited table</span> <span class= code-output > ; with comments prefaced by the  %  character. The columns represent:</span> <span class= code-output > ; Longitude, latitude, elevation (in feet), temperature (in degrees F),</span> <span class= code-output > ; dew point (in degrees  F), wind speed (knots), wind direction (degrees)</span>        A string array with the file contents, one element per line in the file.   ");
  
  

libdata[libdataItem++] = new Array("./pp_resample.html", "pp_resample.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_resample.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2010  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_resample.html#pp_resample_test", "pp_resample_test", 'routine in <a href="./pp_resample.html">pp_resample.pro</a>', "pp_resample.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2010  ", "pp_resample_test", "    Examples to test and illustrate the different behaviors of pp_resample.      Makes up a high resolution Gaussian line and resamples at nr locations (defaults to 15).   ", "nr      The number of locations where the function is to be resampled at.   ", "          -1", "   Run the pp_resample_test routine, to compare the different methods, at different resampling resolution: <span class= code-output >  .com pp_resample ;pp_resample_test is in pp_resample.pro, so it will not be found by itself</span> <span class= code-output >  pp_resample_test,15 ;At this resolution, the local mode is still reasonable.</span> <span class= code-output >  sigma:    7.6632088e-09   6.6129373e-11   1.1358731e-13</span> <span class= code-output >  Trapezoidal areas</span> <span class= code-output >           New grid   Original areas  Resampled areas</span> <span class= code-output >      -3.700000E+00     0.000000E+00     0.000000E+00</span> <span class= code-output >      -3.128571E+00     8.421810E-05     8.421810E-05</span> <span class= code-output >      -2.557143E+00     2.646517E-03     2.731632E-03</span> <span class= code-output >      -1.985714E+00     4.414658E-02     4.425478E-02</span> <span class= code-output >      -1.414286E+00     4.031373E-01     4.035549E-01</span> <span class= code-output >      -8.428571E-01     2.067294E+00     2.069880E+00</span> <span class= code-output >      -2.714286E-01     6.213192E+00     6.223648E+00</span> <span class= code-output >       3.000000E-01     1.177465E+01     1.179997E+01</span> <span class= code-output >       8.714286E-01     1.579429E+01     1.583423E+01</span> <span class= code-output >       1.442857E+00     1.735853E+01     1.740596E+01</span> <span class= code-output >       2.014286E+00     1.768562E+01     1.773506E+01</span> <span class= code-output >       2.585714E+00     1.772227E+01     1.777198E+01</span> <span class= code-output >       3.157143E+00     1.772447E+01     1.777420E+01</span> <span class= code-output >       3.728571E+00     1.772454E+01     1.777427E+01</span> <span class= code-output >       4.300000E+00     1.772454E+01     1.777427E+01</span> <span class= code-output >  Rectangular areas</span> <span class= code-output >              Start              End   Original areas  Resampled areas</span> <span class= code-output >      -3.985714E+00    -3.414286E+00     1.217446E-05     1.217446E-05</span> <span class= code-output >      -3.414286E+00    -2.842857E+00     5.196621E-04     1.176678E-02</span> <span class= code-output >      -2.842857E+00    -2.271429E+00     1.176170E-02     1.446414E-01</span> <span class= code-output >      -2.271429E+00    -1.700000E+00     1.445446E-01     9.845714E-01</span> <span class= code-output >      -1.700000E+00    -1.128571E+00     9.835830E-01     3.834577E+00</span> <span class= code-output >      -1.128571E+00    -5.571429E-01     3.829106E+00     9.038319E+00</span> <span class= code-output >      -5.571429E-01     1.428571E-02     9.021113E+00     1.415784E+01</span> <span class= code-output >       1.428571E-02     5.857143E-01     1.412464E+01     1.687159E+01</span> <span class= code-output >       5.857143E-01     1.157143E+00     1.682703E+01     1.764558E+01</span> <span class= code-output >       1.157143E+00     1.728571E+00     1.759682E+01     1.776405E+01</span> <span class= code-output >       1.728571E+00     2.300000E+00     1.771449E+01     1.777375E+01</span> <span class= code-output >       2.300000E+00     2.871429E+00     1.772411E+01     1.777418E+01</span> <span class= code-output >       2.871429E+00     3.442857E+00     1.772453E+01     1.777419E+01</span> <span class= code-output >       3.442857E+00     4.014286E+00     1.772454E+01     1.777419E+01</span> <span class= code-output >       4.014286E+00     4.585714E+00     1.772454E+01     1.777419E+01</span> <span class= code-output >  pp_resample_test,5  ;At this resolution, the local mode gives an ugly result, but non local is still good.</span> <span class= code-output >  sigma:    7.7028521e-09   6.6471473e-11   1.1417492e-13</span> <span class= code-output >  Trapezoidal areas</span> <span class= code-output >           New grid   Original areas  Resampled areas</span> <span class= code-output >      -3.700000E+00     0.000000E+00    -0.000000E+00</span> <span class= code-output >      -1.700000E+00     1.436523E-01     1.436523E-01</span> <span class= code-output >       3.000000E-01     1.177465E+01     1.191919E+01</span> <span class= code-output >       2.300000E+00     1.771441E+01     1.787357E+01</span> <span class= code-output >       4.300000E+00     1.772454E+01     1.788378E+01</span> <span class= code-output >  Rectangular areas</span> <span class= code-output >              Start              End   Original areas  Resampled areas</span> <span class= code-output >      -4.700000E+00    -2.700000E+00     1.201453E-03     1.201453E-03</span> <span class= code-output >      -2.700000E+00    -7.000000E-01     2.865225E+00     1.715248E+01</span> <span class= code-output >      -7.000000E-01     1.300000E+00     1.714266E+01     1.773729E+01</span> <span class= code-output >       1.300000E+00     3.300000E+00     1.772451E+01     1.773732E+01</span> <span class= code-output >       3.300000E+00     5.300000E+00     1.772454E+01     1.773735E+01</span>            pp_resample, pp_integral   ");
  
  libdata[libdataItem++] = new Array("./pp_resample.html#pp_resample", "pp_resample", 'routine in <a href="./pp_resample.html">pp_resample.pro</a>', "pp_resample.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2010  ", "pp_resample", "    Resamples the given y(x) function, preserving its area (not just a simple interpolation     of the function points, as interpol would do). By default (local=0), each input y(x) is     interpreted a measured sample, that is, as the average of the  flux  falling inside the region     centered at the corresponding x value: x locations are interpreted as the centers of bins. The same     interpretation is used for the output locations (xout), and the returned results. See the plots in     the example for a graphical demonstration.      A literal interpretation of the function (setting the keyword local), as pp_integral does, is intended,     but not yet properly implemented, so the local mode should not be used at this time.     The input values must be ordered in x (it does not matter whether it is increasing or decreasing order).   ", "xstart      Used when not in local mode, to return the start locations of the bins with center in xout.  xend      Used when not in local mode, to return the end locations of the bins with center in xout.  xbox      Used when not in local mode, to return the input x values in pairs of equal values, so that       plotting xbox,ybox shows the rectangles that are how the input values were interpreted.  ybox      Used when not in local mode, to return the input y values in pairs of equal values, so that       plotting xbox,ybox shows the rectangles that are how the input values were interpreted.  xoutbox      Used when not in local mode, to return the resampled x values in pairs of equal values, so that       plotting xoutbox,youtbox shows the rectangles that are how the resampled values are to be interpreted.  youtbox      Used when not in local mode, to return the resampled y values in pairs of equal values, so that       plotting xoutbox,youtbox shows the rectangles that are how the resampled values are to be interpreted.  local      If not set, the y values are interpreted as a measured sample, that is, as the average of the  flux  falling inside the region       centered at the corresponding x values: x locations are interpreted as the centers of bins. Since this interpretation is equivalent       to a literal interpretation of a function made of rectangular regions, in this method there are no interpolations (partial areas, if       any, are just the corresponding fractions of the rectangles). The returned values are to be interpreted in the same way, that is,       they represent rectangular bins, which have the same area as the rectangular bins in the corresponding region of the input function.        If set, interprets the function literally. The result is a function where the area between each of its       points (at xout) is the same as the area of y(x) between these locations.  newton      Passed on to pp_integral. If local is set and newton is set, the function integrations are done with int_tabulated, which       uses a 5 point Newton-Cotes formula. If local is not set, this has no effect.  p0      Parameter for the local mode. It should not be necessary to change it from the default, and it should disappear       in future implementations. It is the number of points to use for the numeric evaluation of a function's       minimum, but the result is not expected to vary for p0 larger than 3, as the function is expected to be       an exact parabola.  lsquadratic      Passed on to pp_integral. If the method requires interpolation, this is passed on to interpol,       to select 4 point quadratic interpolation.       If none of lsquadratic, quadratic and spline are set, interpolation is linear.  quadratic      Passed on to pp_integral. If the method requires interpolation, this is passed on to interpol,       to select 3 point quadratic interpolation.       If none of lsquadratic, quadratic and spline are set, interpolation is linear.  spline      Passed on to pp_integral. If the method requires interpolation, this is passed on to interpol,       to select spline interpolation.       If none of lsquadratic, quadratic and spline are set, interpolation is linear.   y      An array with the function values corresponding to the locations in x.  x      An array of locations where the function is sampled. Must be ordered (increasing or decreasing).  xout      An array of the locations where the y(x) function is to be resampled.   ", "          -1", "   Make a well-sampled input function y(x) and an output grid xout with few locations: <span class= code-output > x=dindgen(10001)/1d4-0.5d0</span> <span class= code-output > y=exp(-(x*2d1)^2)*0.5d0</span> <span class= code-output > xout=dindgen(5)/6d0-0.3d0</span>    Do the resampling and look at the results: <span class= code-output > yout=pp_resample(y,x,xout,xstart=xstart,xend=xend,xbox=xbox,ybox=ybox,xoutbox=xoutbox,youtbox=youtbox)</span> <span class= code-output > print,xstart,xend</span> <span class= code-output > ;-0.38333333     -0.21666667    -0.050000000      0.11666667      0.28333333</span> <span class= code-output > ;-0.21666667    -0.050000000      0.11666667      0.28333333      0.45000000</span> <span class= code-output > print,xstart,xend</span> <span class= code-output > ;-0.38333333     -0.21666667    -0.050000000      0.11666667      0.28333333</span> <span class= code-output > ;-0.21666667    -0.050000000      0.11666667      0.28333333      0.45000000</span> <span class= code-output > iplot,xbox,ybox,name='input function (rectangles)',/insert_legend,thick=2.</span> <span class= code-output > iplot,xoutbox,youtbox,/over,color=[255,0,0],name='resampled function (rectangles)',/insert_legend,thick=2.</span> <span class= code-output > iplot,xout,yout,/over,color=[0,255,0],name='resampled function (locations)',/insert_legend,thick=2.</span>          See also the example in pp_resample_test, for a comparison of the methods.      Improve the implementation of the resampling when local is set, to get replace the numerical    minimization by an analytic expression.   pp_integral       An array with the same length as xout, with the input function resampled at those locations.   ");
  
  

libdata[libdataItem++] = new Array("./pp_rise_set.html", "pp_rise_set.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_rise_set.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_rise_set.html#pp_rise_set", "pp_rise_set", 'routine in <a href="./pp_rise_set.html">pp_rise_set.pro</a>', "pp_rise_set.pro", "Paulo Penteado (pp.penteado@gmail.com), Jun/2010  ", "pp_rise_set", "    Calculates rise, transit and set times, plus the time above the horizon (sky time) for the given     equatorial coordinates, location and date.      GDL-compatible. All dependencies are routines from idlastro (http://idlastro.gsfc.nasa.gov/).   ", "obsname      String with the observatory name, as understood by idlastro's observatory procedure. If provided, supersedes lat, lon and tz.  lat      Latitude of the observing location, in degrees (positive is north).  lon      Longitude of the observing location, in degrees (positive is east, contrary to that returned by observatory).  tz      Time zone of the observing location, in hours (positive is east, contrary to that returned by observatory).  day      Day of the month for the observation.  month      Month for the observation.  year      Year for the observation.  prev_day      By default, returned times of day (for transit, rise and set) are relative to local midnight, so times before       midnight are negative. If this keyword is set, times before midnight are returned as the time for the previous day,       instead.  extra      If set, extra data is output (sunrise/sunset times, target altitude at sunrise/sunet, etc).   ra      Right ascension(s) of the point(s) to calculate the visibility for. Units: hours. May be a scalar or arrar,       and must have the same number of elements as dec.  dec      Declination(s) of the point(s) to calculate the visibility for. Units: degrees. May be a scalar or arrar,       and must have the same number of elements as ra.   ", "          -1", "   Make up some coordinates and calculate the times: <span class= code-output > ra=[22d0+3d0/60d0+18d0/3600d0,0d0,19d0]</span> <span class= code-output > dec=[-9d0-40d0/60d0-34d0/3600d0,-87d0,80d0]</span> <span class= code-output > r=pp_rise_set(ra,dec,obsname='eso',day=0,month=06,year=2010,/prev)</span> <span class= code-output > print,r.transit</span> <span class= code-output >   6.2173759       8.1019913       3.1540115</span> <span class= code-output > print,r.sky</span> <span class= code-output >   12.765635       24.000000       0.0000000</span> <span class= code-output > print,r.rise</span> <span class= code-output >   23.834559             NaN             NaN</span> <span class= code-output > print,r.set</span> <span class= code-output >   12.600193             NaN             NaN</span>  observatory, ten, ct2lst, jdcnv       A structure with the fields transit, sky, rise and set, each with the same dimensions as ra,dec, with     the times for transit, above the horizon, rise and set, respectively, in civil hours. Those points that are never     above the horizon have sky=0 and NaN for rise and set. Those points that are always above the horizon have sky=24     and NaN for rise and set.   ");
  
  

libdata[libdataItem++] = new Array("./pp_sphericalpath.html", "pp_sphericalpath.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_sphericalpath.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_sphericalpath.html#pp_sphericalpath", "pp_sphericalpath", 'routine in <a href="./pp_sphericalpath.html">pp_sphericalpath.pro</a>', "pp_sphericalpath.pro", "Paulo Penteado (http://www.ppenteado.net), Nov/2014  ", "pp_sphericalpath", "    Given a set of lon/lat points on a sphere, this function calculates vertices of     a path connecting the input vertices, placed along great circles connecting the     input vertices. The path is a polygon approximation of the curved path formed by     the great circles.   ", "maxlength      If set, specifies the maximum angular length of each segment of the polygon.  nsegments      If set, specifies a fixed number of vertices to use in for the line connecting each pair       of input points. If both maxlength and nsegments are set, nsegments takes precendence.  open      If set, the output path does not connect the last input point to the first input point.  _ref_extra      Anything else is passed along to map_2points, which is used to create the paths connecting the       pairs of input points. One commonly used option would be the radians keyword, to use radians,       instead of degrees, for lon and lat. See the IDL help for map_2points' options.   no_fix_lonlons      An array of longitudes for the vertices which are to be connected by a path made of great circles.       Must be in degrees, unless radians is set.       Multiple polygons are supported in two different ways: 1) If all N polygons have the same number of       vertices (M), lons can be given as a [M,N] array. 2) For arbitrary numbers of vertices, lons is given       as a list, where each list element is an array of vertices for one polygon. With multiple polygons, the       ouput is a list, where each list element has latitudes and longitudes for one polygon.  lats      An array of latitudes for the vertices which are to be connected by a path made of great circles.       Must be in degrees, unless radians is set.       Multiple polygons are supported in two different ways: 1) If all N polygons have the same number of       vertices (M), lats can be given as a [M,N] array. 2) For arbitrary numbers of vertices, lats is given       as a list, where each list element is an array of vertices for one polygon. With multiple polygons, the       ouput is a list, where each list element has latitudes and longitudes for one polygon.   ", "          -1", "   Create a rectangle in lon/lat: <span class= code-output > lons=[30d0,120d0,120d0,30d0]</span> <span class= code-output > lats=[70d0,70d0,10d0,10d0]</span>   Create a closed path connecting these points: <span class= code-output > path=pp_sphericalpath(lons,lats)</span>   Create a base map to plot the results (from IDL's imap example): <span class= code-output > file = FILEPATH('avhrr.png', SUBDIRECTORY=['examples','data'])</span> <span class= code-output > data = READ_PNG(file, r, g, b)</span> <span class= code-output > IMAP, data, LIMIT=[-90,-180,90,180], $</span> <span class= code-output > MAP_PROJECTION='Mollweide', RGB_TABLE=[[r],[g],[b]], $</span> <span class= code-output >   IMAGE_TRANSPARENCY=50, GRID_UNITS=2, $</span> <span class= code-output >   IMAGE_LOCATION=[-180,-90], IMAGE_DIMENSIONS=[360,180]</span>   Plot the input points connected by straight lines: <span class= code-output > iplot,lons[[0,1,2,3,0]],lats[[0,1,2,3,0]],color='red',/overplot</span>   Plot the path created by pp_sphericalpath: <span class= code-output > iplot,/overplot,color='green',path,thick=3.</span>   The result should look like           The green path, produced with the output of pp_sphericalpath looks    like a curve, made by the 4 great circles connecting these points. In reality,    the path is made of 2367 points, separated by 0.1 degrees.    This can be verified by making the same plot on a gnomonic projection, which has    the property that great circles are straight lines: <span class= code-output > imap,data,limit=[0,20,80,130],map_projection='mollweide',rgb_table=[[r],[g],[b]],$</span> <span class= code-output > grid_units=2,image_transparency=50,image_location=[-180,-90],$</span> <span class= code-output > image_dimensions=[360,180],center_latitude=50,center_longitude=75</span> <span class= code-output > iplot,/overplot,color='green',path,thick=3.</span>    The result should look like           Where the green path is rendered as straight lines, since great circles map    into straight lines in a gnomonic projection.       A 2D array [2,N] with a set of longitudes/latitudes for the N vertices of the path, for each path.     The number of vertices along each edge is determined by maxlength     or nsegments. If open is set, the last point is not connected to the first point.     If multiple polygons were given as input, the ouput is a list, where each list element is a [2,N] array     with lon/lat for each polygon (N needs not to be the same for all polygons).   ");
  
  

libdata[libdataItem++] = new Array("./pp_struct_unravel.html", "pp_struct_unravel.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_struct_unravel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_struct_unravel.html#pp_struct_unravel", "pp_struct_unravel", 'routine in <a href="./pp_struct_unravel.html">pp_struct_unravel.pro</a>', "pp_struct_unravel.pro", "Paulo Penteado (http://www.ppenteado.net), Feb/2013  ", "pp_struct_unravel", "    This function is used to obtain a flat structure from a nested structure.     Its output is useful as an input to write_csv (and write_csv_pp).   ", "testonly      If set, instead of returning a copy of the structure, only a test is performed, to determine       whether the given variable is a nested structure. This is useful when the structure is large: upon       determining that the structure is not nested, the user might decide to use the original structure,       instead of the output of pp_struct_unravel (which would just be a copy of the original structure).   str      The structure to be flattened. See example below.   ", "          -1", "   Define a nested structure and then flatten it: <span class= code-output > str={a:1,b:[2,3],c:{d:'e',f:2.6},g:-1}</span> <span class= code-output > help,str</span> <span class= code-output > ;** Structure &lt;eda88578&gt;, 4 tags, length=40, data length=28, refs=1:</span> <span class= code-output > ;A               INT              1</span> <span class= code-output > ;B               INT       Array[2]</span> <span class= code-output > ;C               STRUCT    -&gt; &lt;Anonymous&gt; Array[1]</span> <span class= code-output > ;G               INT             -1</span> <span class= code-output > help,pp_struct_unravel(str)</span> <span class= code-output > ;** Structure &lt;ec63eeb8&gt;, 5 tags, length=32, data length=28, refs=1:</span> <span class= code-output > ;A               INT              1</span> <span class= code-output > ;B               INT       Array[2]</span> <span class= code-output > ;C_D             STRING    'e'</span> <span class= code-output > ;C_F             FLOAT           2.60000</span> <span class= code-output > ;G               INT             -1</span>        Produces a flat structure from a nested structure. If the input variable str does     not have nested structures, an identical copy is returned.   ");
  
  

libdata[libdataItem++] = new Array("./pp_structextract.html", "pp_structextract.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_structextract.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_structextract.html#pp_structextract", "pp_structextract", 'routine in <a href="./pp_structextract.html">pp_structextract.pro</a>', "pp_structextract.pro", "", "pp_structextract", "", "_ref_extranullstrin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pp_structsubset.html", "pp_structsubset.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_structsubset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_structsubset.html#pp_structsubset", "pp_structsubset", 'routine in <a href="./pp_structsubset.html">pp_structsubset.pro</a>', "pp_structsubset.pro", "Paulo Penteado (http://www.ppenteado.net), Jan/2013  ", "pp_structsubset", "    Creates a structure that has a subset of the fields from the input structure.   ", "structin      The input structure, from which a subset will be taken.  fields      A string array with each element specifying the name of a field of       structin to go into the output structure.   ", "          -1", "   Make a simple structure and subset it: <span class= code-output > structin={a:18,b:'something',c:[0,9],d:[-9.5d0,4.85d0,17d0]}</span> <span class= code-output > help,pp_structsubset(structin,['d','b'])</span> <span class= code-output > ;** Structure &lt;a413a488&gt;, 2 tags, length=40, data length=40, refs=1:</span> <span class= code-output > ;D               DOUBLE    Array[3]</span> <span class= code-output > ;B               STRING    'something'</span> <span class= code-output > print,pp_structsubset(structin,['d','b'])</span> <span class= code-output > ;{      -9.5000000       4.8500000       17.000000</span> <span class= code-output > ;something}</span>      A structure with a subset of the fields from the input structure,      specified by a string array with the field names, in the desired order.      If the order of the fields did not matter, this could be done easily with       a hash.   ");
  
  

libdata[libdataItem++] = new Array("./pp_structtomysql.html", "pp_structtomysql.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_structtomysql.pro", "Paulo Penteado (http://www.ppenteado.net), Apr/2015  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_structtomysql.html#pp_structtomysql__typename", "pp_structtomysql__typename", 'routine in <a href="./pp_structtomysql.html">pp_structtomysql.pro</a>', "pp_structtomysql.pro", "Paulo Penteado (http://www.ppenteado.net), Apr 2015  ", "pp_structtomysql__typename", "    Helper function, to return the mysql variable type corresponding to an IDL     variable type.   ", "minlen      If the type is a string, by default the mysql type will have the length of       the longest string in var. If minlen is provided, the mysql length will be       the greatest among minlen and the longest string in var.  maxlen      If the type is a string, by default the mysql type will have the length of       the longest string in var. If maxlen is provided, the mysql length will be       the smallest among maxlen and the longest string in var.   var      The IDL variable whose mysql type is desired.   ", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pp_structtomysql.html#pp_structtomysql", "pp_structtomysql", 'routine in <a href="./pp_structtomysql.html">pp_structtomysql.pro</a>', "pp_structtomysql.pro", "Paulo Penteado (http://www.ppenteado.net), Apr 2015  ", "pp_structtomysql", "    Creates a table in a mysql server, from an IDL array of structures.     Each element of the array becomes a row in the table. The column names are     the structure field names, with a '_' appended (to avoid mysql reserved words).     The mysql server information (address, login, password, etc) is taken from ~/.my.conf.     This is handled by Marc Buie's openmysql     (http://www.boulder.swri.edu/~buie/idl/pro/openmysql.html).   ", "dbname      The name of the database where the table is to be created.  username      The username to use in mysql. Defaults to the current user.  verbose      If set, the mysql commands get printed to the terminal.  primary_key      If set, determines which key will be the table's primary key.  nodeletecsv      During injection, the data is put into a csv file in the current directory       (pp_structtomysql_tmpfile.csv). If this keyword is set, the file is not deleted       at the end.  nodroptable      By default, if the table to be created already exists, it is dropped, then       created with the data provided. If this keyword is set, dropping the table is       skipped, and this procedure will just attempt to insert the data into the table.   generate_code_only      If provided, this variable will contain a string array with the commands that       would have been issued to mysql. No mysql commands are executed.   struct      The structure containing the data to be inserted in the mysql table.  tablename      The name of the table to be created.   ", "          -1", "   Create a table in a mysql server (server parameters set in ~/.my.conf), then retrieve    the data from it. In this case, assuming that there is a database named pp_structtomysql,    and that the user has write access to it: <span class= code-output > outstruct=replicate({a:1,b:2d0,c:'def'},4)</span> <span class= code-output > outstruct.a=indgen(4)</span> <span class= code-output > outstruct.b=dindgen(4)^2</span> <span class= code-output > outstruct.c+='_'+strtrim(indgen(4),2)</span> <span class= code-output > print,outstruct</span> <span class= code-output > ;{       0       0.0000000 def_0}</span> <span class= code-output > ;{       1       1.0000000 def_1}</span> <span class= code-output > ;{       2       4.0000000 def_2}</span> <span class= code-output > ;{       3       9.0000000 def_3}</span> <span class= code-output > pp_structtomysql,outstruct,'pp_structtomysql_example',primary_key='c_',dbname='pp_structtomysql'</span> <span class= code-output > openmysql,lun,'pp_structtomysql'</span> <span class= code-output > instruct=pp_mysqlquery(lun,'select * from pp_structtomysql_example;')</span> <span class= code-output > print,instruct</span> <span class= code-output > ;{                     0                     0 def_0}</span> <span class= code-output > ;{                     1                     1 def_1}</span> <span class= code-output > ;{                     2                     4 def_2}</span> <span class= code-output > ;{                     3                     9 def_3}</span> <span class= code-output > free_lun,lun</span>  openmysql, mysqlquery, from Marc Buie's library  (http://www.boulder.swri.edu/~buie/idl/).   ");
  
  

libdata[libdataItem++] = new Array("./pp_structtransp.html", "pp_structtransp.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_structtransp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_structtransp.html#pp_structtransp", "pp_structtransp", 'routine in <a href="./pp_structtransp.html">pp_structtransp.pro</a>', "pp_structtransp.pro", "Paulo Penteado (http://www.ppenteado.net), Feb/2013  ", "pp_structtransp", "    Given a structure of arrays, creates its transpose (an array of structures). Useful     for the output of read_csv and read_ascii, to make a structure array where each element     is a row of the table (see example below).   ", "strin      The structure to be transposed. See example below.   ", "          -1", "    Read the contents of IDL's example csv file and transpose them: <span class= code-output > c=read_csv_pp(file_which('ScatterplotData.csv'),n_table_header=1)</span> <span class= code-output > help,c</span> <span class= code-output > ;** Structure &lt;edac6838&gt;, 3 tags, length=3080, data length=3080, refs=1:</span> <span class= code-output > ;DISTANCE_FROM_TERMINUS__METERS_         LONG      Array[154]</span> <span class= code-output > ;MEAN_PARTICLE_SIZE__MM_                 DOUBLE    Array[154]</span> <span class= code-output > ;SEDIMENTATION_RATE__G_CM2YR_            DOUBLE    Array[154]</span> <span class= code-output > help,pp_structtransp(c)</span> <span class= code-output > ;&lt;Expression&gt;    STRUCT    = -&gt; &lt;Anonymous&gt; Array[154]</span> <span class= code-output > help,(pp_structtransp(c))[0]</span> <span class= code-output > ;** Structure &lt;ec40f7f8&gt;, 3 tags, length=24, data length=20, refs=1:</span> <span class= code-output > ;DISTANCE_FROM_TERMINUS__METERS_         LONG                 0</span> <span class= code-output > ;MEAN_PARTICLE_SIZE__MM_                 DOUBLE         0.062000000</span> <span class= code-output > ;SEDIMENTATION_RATE__G_CM2YR_            DOUBLE           32.500000</span>        An array of structures, where the fields in each element have the values from     the corresponding element of the same fields in the input structure (see eaxmple below).   ");
  
  

libdata[libdataItem++] = new Array("./pp_writencdf.html", "pp_writencdf.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_writencdf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_writencdf.html#pp_writencdf", "pp_writencdf", 'routine in <a href="./pp_writencdf.html">pp_writencdf.pro</a>', "pp_writencdf.pro", "Paulo Penteado (http://www.ppenteado.net),  ", "pp_writencdf", "    Writes a netcdf file from a structure a in the long format returned by pp_readncdfs.   ", "double      If set, makes the variables in double precision.   strin      Structure specifying everything about the file to be written. See the help of pp_readncdfs for information on the structure format.   ", "          -1", "   Process attributes.   ");
  
  

libdata[libdataItem++] = new Array("./pp_writepars.html", "pp_writepars.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pp_writepars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pp_writepars.html#pp_writepars", "pp_writepars", 'routine in <a href="./pp_writepars.html">pp_writepars.pro</a>', "pp_writepars.pro", "Paulo Penteado (pp.penteado@gmail.com), Feb/2011  ", "pp_writepars", "    Writes a text parameter file from the given hash. The file will contain     one line per hash element, in the form key=value.      The complement to this procedure is pp_readpars. For compatibility with     pp_readpars, header lines should be comment lines (start with the comment     marker), and the keys in the hash should be strings (if not they will get     converted to strings in the output file, and the conversion may not be done     in a desirable way).   ", "formats      Either a scalar string, specifying the format to use for all file lines,       or a hash of strings, with the same keys as the hash of values, each giving       the format to use for the correponding line.  order      An array or list of keys to the parameter hash, sepcifying the order in which       the elements whould be written to the file. If not provided, no ordering is made.   header      If given, its contents are printed on the top of the file. Useful for headers       (for compatibility with pp_readpars, header lines should be comments).  file      A string with the name of the file to create.  ipars      A hash with the values to write in the file.   ", "          -1", "   Make up a simple set of parameters and write them with a comment line: <span class= code-output > pars=hash()</span> <span class= code-output > pars['a']=9d0</span> <span class= code-output > pars['aa']=-17</span> <span class= code-output > pars['b']= 'some string' </span> <span class= code-output > pp_writepars,'pp_writepars_example.txt',pars,header='#some comment'</span>    Which produces a file with     #some comment     a=       9.0000000     b='some string'     aa=     -17   ");
  
  

libdata[libdataItem++] = new Array("./read_csv_pp.html", "read_csv_pp.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "read_csv_pp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./read_csv_pp.html#read_csv_pp", "read_csv_pp", 'routine in <a href="./read_csv_pp.html">read_csv_pp.pro</a>', "read_csv_pp.pro", "Paulo Penteado (http://www.ppenteado.net), Feb/2013  ", "read_csv_pp", "    A simple wrapper for read_csv_pp_strings, to assign field names based on either the file's column headers,     or a user-supplied string array. It uses read_csv_pp_strings, instead of IDL's read_csv,     due to its superior handling of columns types.   ", "header_ref_extra      Any other arguments are simply passed to/from read_csv_pp_strings, unaltered.  field_names      A string array with the name to assign to each field (column) in the output. If provided, this       overrides the auto column names derived from the csv header line.  blank      If set, blank (empty / whitespace) strings are allowed in numeric columns: if a column        contains numbers and blank values, its type will be numeric, and any blanks will be replaced        with 0. When not set (default), a column containing blanks will be returned as strings.        Note that, due to the way the original read_csv operates, a colum consisting entirely of blanks        will be returned a string column.  transp      If set, return the transpose of the default output - shorter than writing pp_structtransp(read_csv_pp()).       This is a structure array, where each element is a row in the file, instead of a structure with       array fields (one per column).  rows_for_testing      The number of rows in the file to use when testing for column types. If set to 0, all rows all used.  types      An array of type codes. If provided with values, these types are assumed for the columns, instead of trying        to determine the column types. If provided as an undefined array, the typecodes found for the file are returned        in this array.  nan       If set, NaNs are allowed as floating-point numbers.  infinity       If set, infinities are allowed as floating-point numbers.  integer       If set, only integers are considered to be numeric types: floating-point numbers will remain        as strings.  trim       If set, this keyword is passed to strtrim(), which gets applied to each element being tested        to determine if it is a number.   filename      The name of the CSV file to read.   ", "          -1", "    To read IDL's example csv file: <span class= code-output > c=read_csv_pp(file_which('ScatterplotData.csv'),n_table_header=1,header=h)</span> <span class= code-output > help,c</span> <span class= code-output > ;** Structure &lt;ec157fb8&gt;, 3 tags, length=3080, data length=3080, refs=1:</span> <span class= code-output > ;DISTANCE_FROM_TERMINUS__METERS_   LONG      Array[154]</span> <span class= code-output > ;MEAN_PARTICLE_SIZE__MM_           DOUBLE    Array[154]</span> <span class= code-output > ;SEDIMENTATION_RATE__G_CM2YR_      DOUBLE    Array[154]</span> <span class= code-output > ;print,h</span> <span class= code-output > ;Distance from Terminus (meters) Mean Particle size (mm) Sedimentation Rate (g/cm2yr)</span>     To read that same file, but get the result as a structure array (one element per table row): <span class= code-output > c=read_csv_pp(file_which('ScatterplotData.csv'),n_table_header=1,header=h,/transp)</span> <span class= code-output > help,c</span> <span class= code-output > ;C               STRUCT    = -&gt; &lt;Anonymous&gt; Array[154]</span> <span class= code-output > help,c[0]</span> <span class= code-output > ;** Structure &lt;98322d88&gt;, 3 tags, length=24, data length=20, refs=2:</span> <span class= code-output > ;   DISTANCE_FROM_TERMINUS__METERS_ LONG                 0</span> <span class= code-output > ;   MEAN_PARTICLE_SIZE__MM_         DOUBLE         0.062000000</span> <span class= code-output > ;   SEDIMENTATION_RATE__G_CM2YR_    DOUBLE           32.500000</span>  pp_isnumber, read_csv_pp_strings, pp_structtransp       A structure of arrays, where each field corresponds to a column read from the input file.   ");
  
  

libdata[libdataItem++] = new Array("./read_csv_pp_strings.html", "read_csv_pp_strings.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "read_csv_pp_strings.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./read_csv_pp_strings.html#read_csv_fieldnames", "read_csv_fieldnames", 'routine in <a href="./read_csv_pp_strings.html">read_csv_pp_strings.pro</a>', "read_csv_pp_strings.pro", "", "read_csv_fieldnames", "", "fieldCount", "          -1", "");
  
  libdata[libdataItem++] = new Array("./read_csv_pp_strings.html#read_csv_pp_strings", "read_csv_pp_strings", 'routine in <a href="./read_csv_pp_strings.html">read_csv_pp_strings.pro</a>', "read_csv_pp_strings.pro", "", "read_csv_pp_strings", "", "COUNTHEADERMISSING_VALUENUM_RECORDSRECORD_STARTN_TABLE_HEADERTABLE_HEADER_EXTRAtypesnaninfinityintegertrimblankrows_for_testingFilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./tessellateshapes_pp.html", "tessellateshapes_pp.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "tessellateshapes_pp.pro", "Paulo Penteado (http://www.ppenteado.net), based on the original code  that comes with IDL.   ", "", "", "", "          -1", "    Just a function to overwrite IDL's _tessellateshapes, to preserve vertex     colors when the vertices are tessellated into a different number of vertices.     This file is compiled by pp_drawshericalpoly, to make sure this method is compiled     after the native _tessellateshapes.   ");
  
  
  libdata[libdataItem++] = new Array("./tessellateshapes_pp.html#IDLitVisPolygon::_TessellateShapes", "IDLitVisPolygon::_TessellateShapes", 'routine in <a href="./tessellateshapes_pp.html">tessellateshapes_pp.pro</a>', "tessellateshapes_pp.pro", "Paulo Penteado (http://www.ppenteado.net), Aug/2015  ", "IDLitVisPolygon::_TessellateShapes", "    Just a function to overwrite IDL's _tessellateshapes, to preserve vertex     colors when the vertices are tessellated into a different number of vertices.     This file is compiled by pp_drawshericalpoly, to make sure this method is compiled     after the native _tessellateshapes. The changes are at lines 117-120.   ", "MAP_STRUCTUREPOLYGONSVERT_COLORSdataconnectivityshapesvertColors", "          -1", "");
  
  libdata[libdataItem++] = new Array("./tessellateshapes_pp.html#tessellateshapes_pp", "tessellateshapes_pp", 'routine in <a href="./tessellateshapes_pp.html">tessellateshapes_pp.pro</a>', "tessellateshapes_pp.pro", "Paulo Penteado (http://www.ppenteado.net), Aug/2015  ", "tessellateshapes_pp", "    A dummy procedure, that exists just to get this file compiled when needed, to     get the _tessellateshapes method above compiled.     This file is compiled by pp_drawshericalpoly, to make sure this method is compiled     after the native _tessellateshapes.   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./write_csv_pp.html", "write_csv_pp.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "write_csv_pp.pro", "Paulo Penteado (http://www.ppenteado.net), Feb/2013  This file contains write_csv_pp, and a copy of IDL's write_csv routines (renamed write_csv_pp_original  and write_csv_convert_pp_original), since write_csv_pp requires an edit on the original write_csv.  ", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./write_csv_pp.html#write_csv_convert_pp_original", "write_csv_convert_pp_original", 'routine in <a href="./write_csv_pp.html">write_csv_pp.pro</a>', "write_csv_pp.pro", "", "write_csv_convert_pp_original", "", "noquotedata", "          -1", "");
  
  libdata[libdataItem++] = new Array("./write_csv_pp.html#write_csv_pp_original", "write_csv_pp_original", 'routine in <a href="./write_csv_pp.html">write_csv_pp.pro</a>', "write_csv_pp.pro", "", "write_csv_pp_original", "    The WRITE_CSV procedure writes data to a  comma-separated value      (comma-delimited) text file.      This routine writes CSV files consisting of an optional line of column     headers, followed by columnar data, with commas separating each field.     Each row is a new record.      This routine is written in the IDL language. Its source code can be     found in the file write_csv.pro in the lib subdirectory of the IDL     distribution.   ", "HEADER      Set this keyword equal to a string array containing the column header       names. The number of elements in HEADER must match the number of       columns provided in Data1...Data8. If HEADER is not present,       then no header row is written.        TABLE_HEADER       Set this keyword to a scalar string or string array containing extra table lines       to be written at the beginning of the file.   TABLE_HEADERappendnoquoteFilename      A string containing the name of the CSV file to write.   Data1      The data values to be written out to the CSV file. The data arguments       can have the following forms:       * Data1 can be an IDL structure, where each field contains a         one-dimensional array (a vector) of data that corresponds         to a separate column. The vectors must all have the same         number of elements, but can have different data types. If Data1         is an IDL structure, then all other data arguments are ignored.       * Data1 can be a two-dimensional array, where each column in the array         corresponds to a separate column in the output file. If Data1 is         a two-dimensional array, then all other data arguments are ignored.       * Data1...Data8 are one-dimensional arrays (vectors), where each vector         corresponds to a separate column in the output file. Each vector         can have a different data type.   Data2Data3Data4Data5Data6Data7Data8", "          -1", "   Written, CT, VIS, Nov 2008    MP, VIS, Oct 2009:  Added keyword SKIP_HEADER    Dec 2010:  Better handling for byte and double precision data.   ");
  
  libdata[libdataItem++] = new Array("./write_csv_pp.html#write_csv_pp", "write_csv_pp", 'routine in <a href="./write_csv_pp.html">write_csv_pp.pro</a>', "write_csv_pp.pro", "Paulo Penteado (http://www.ppenteado.net), Feb/2013  ", "write_csv_pp", "    A simple wrapper for write_csv, to write csv files using a structure's field names as column     titles (setting titlesfromfields), ccepting nested structures, and with the option of writing the     file by pieces.   ", "titlesfromfields      If set, the column titles in the csv file are made by the field names in data1.  divide      Used to split the file writing into divide pieces. This is useful to save memory, since       IDL's write_csv creates a temporary string array with the whole file contents, before writing it       to the file, and that array can be several times larger than the input array.  _ref_extra      Any other parameters are passed, unaltered, to / from write_csv.   verbose      If set, write_csv_pp will inform which piece of the file it is currently writing  noquote      If set, string fields that do not contain commas or double-quotes will not       be quoted. If not set (default), all string fields are quoted.  file      Passed to write_csv, specifies the name of the file to write.  data1      Passed to write_csv, after the variable has its structures flattened by a call to       pp_struct_unravel.  data2      Passed unaltered to write_csv.  data3      Passed unaltered to write_csv.  data4      Passed unaltered to write_csv.  data5      Passed unaltered to write_csv.  data6      Passed unaltered to write_csv.  data7      Passed unaltered to write_csv.  data8      Passed unaltered to write_csv.   ", "          -1", "    Make a simple structure array and write it to a csv file: <span class= code-output > s={a:1,b:{c:2.5,d:-9,e:0},f:1.8,g:'h'}</span> <span class= code-output > s2=replicate(s,2)</span> <span class= code-output > s2[1].a=-1</span> <span class= code-output > s2[1].f=-1.8</span> <span class= code-output > s2[1].g='h,i'</span> <span class= code-output > write_csv_pp,'write_csv_pp_test.csv',s2,/titlesfromfields</span>     Which result in a file with:      A,B_C,B_D,B_E,F,G      1,2.50000,-9,0,1.80000, h       -1,2.50000,-9,0,-1.80000, h,i       Compare with using the noquote keyword:        write_csv_pp,'write_csv_pp_test.csv',s2,/titlesfromfields,/noquote      Which produces      A,B_C,B_D,B_E,F,G      1,2.50000,-9,0,1.80000,h      -1,2.50000,-9,0,-1.80000, h,i       On the first row, the string (the last column) is unquoted. On the second,     it is still quoted because it contains a comma; without this quote, it     would look like the row has an extra column.   pp_struct_unravel   ");
  
  

